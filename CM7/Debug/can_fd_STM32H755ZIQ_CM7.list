
can_fd_STM32H755ZIQ_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bfc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  24000010  08006f48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000638  08006f48  00020638  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220bd  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357a  00000000  00000000  000420fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00045678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00046830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad9c  00000000  00000000  000478f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b95  00000000  00000000  0008268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001850ac  00000000  00000000  00096221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021b2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  0021b320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006e7c 	.word	0x08006e7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006e7c 	.word	0x08006e7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *                     This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d027      	beq.n	8000768 <HAL_FDCAN_RxFifo0Callback+0x64>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f001 fadc 	bl	8001cdc <HAL_FDCAN_GetRxMessage>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 800072a:	f000 fbbb 	bl	8000ea4 <Error_Handler>
    }

    //HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);

    /* Display LEDx */
    if ((RxHeader.Identifier == 0x321) && (RxHeader.IdType == FDCAN_STANDARD_ID) && (RxHeader.DataLength == FDCAN_DLC_BYTES_8))
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f240 3221 	movw	r2, #801	; 0x321
 8000736:	4293      	cmp	r3, r2
 8000738:	d10c      	bne.n	8000754 <HAL_FDCAN_RxFifo0Callback+0x50>
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <HAL_FDCAN_RxFifo0Callback+0x50>
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800074a:	d103      	bne.n	8000754 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
      //LED_Display(RxData[0]);
      //ubKeyNumber = RxData[0];
    	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800074c:	2101      	movs	r1, #1
 800074e:	480a      	ldr	r0, [pc, #40]	; (8000778 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000750:	f002 fb83 	bl	8002e5a <HAL_GPIO_TogglePin>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f001 fc2d 	bl	8001fb8 <HAL_FDCAN_ActivateNotification>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <HAL_FDCAN_RxFifo0Callback+0x64>
    {
      /* Notification Error */
      Error_Handler();
 8000764:	f000 fb9e 	bl	8000ea4 <Error_Handler>
    }
  }
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	240005a4 	.word	0x240005a4
 8000774:	24000608 	.word	0x24000608
 8000778:	58020400 	.word	0x58020400

0800077c <fd_can_init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
void fd_can_init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	Phase_segment_2            | 10 tq        | 4 tq
	Synchronization_Jump_width | 8 tq         | 4 tq
	Bit_length                 | 80 tq = 2 µs | 20 tq = 0.5 µs
	Bit_rate                   | 500 MBit/s   | 2 MBit/s
  */
  hfdcan1.Instance = FDCAN1;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <fd_can_init+0xc4>)
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <fd_can_init+0xc8>)
 8000784:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <fd_can_init+0xc4>)
 8000788:	f44f 7240 	mov.w	r2, #768	; 0x300
 800078c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <fd_can_init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <fd_can_init+0xc4>)
 8000796:	2201      	movs	r2, #1
 8000798:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <fd_can_init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <fd_can_init+0xc4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	749a      	strb	r2, [r3, #18]

  hfdcan1.Init.NominalPrescaler = 1;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <fd_can_init+0xc4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <fd_can_init+0xc4>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 69;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <fd_can_init+0xc4>)
 80007b4:	2245      	movs	r2, #69	; 0x45
 80007b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <fd_can_init+0xc4>)
 80007ba:	220a      	movs	r2, #10
 80007bc:	621a      	str	r2, [r3, #32]

  hfdcan1.Init.DataPrescaler = 1;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <fd_can_init+0xc4>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <fd_can_init+0xc4>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <fd_can_init+0xc4>)
 80007cc:	220f      	movs	r2, #15
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <fd_can_init+0xc4>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30

  hfdcan1.Init.MessageRAMOffset = 0;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <fd_can_init+0xc4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <fd_can_init+0xc4>)
 80007de:	2201      	movs	r2, #1
 80007e0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <fd_can_init+0xc4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <fd_can_init+0xc4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <fd_can_init+0xc4>)
 80007f0:	2212      	movs	r2, #18
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <fd_can_init+0xc4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <fd_can_init+0xc4>)
 80007fc:	2212      	movs	r2, #18
 80007fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <fd_can_init+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <fd_can_init+0xc4>)
 8000808:	2212      	movs	r2, #18
 800080a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <fd_can_init+0xc4>)
 800080e:	2200      	movs	r2, #0
 8000810:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <fd_can_init+0xc4>)
 8000814:	2200      	movs	r2, #0
 8000816:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <fd_can_init+0xc4>)
 800081a:	2201      	movs	r2, #1
 800081c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <fd_can_init+0xc4>)
 8000820:	2200      	movs	r2, #0
 8000822:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <fd_can_init+0xc4>)
 8000826:	2212      	movs	r2, #18
 8000828:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <fd_can_init+0xc4>)
 800082c:	f000 ff04 	bl	8001638 <HAL_FDCAN_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <fd_can_init+0xbe>
  {
    Error_Handler();
 8000836:	f000 fb35 	bl	8000ea4 <Error_Handler>
  }

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	240004c4 	.word	0x240004c4
 8000844:	4000a000 	.word	0x4000a000

08000848 <FDCAN_Config>:

void FDCAN_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000856:	2302      	movs	r3, #2
 8000858:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 800085e:	f240 3321 	movw	r3, #801	; 0x321
 8000862:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000864:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	482b      	ldr	r0, [pc, #172]	; (800091c <FDCAN_Config+0xd4>)
 8000870:	f001 f8c4 	bl	80019fc <HAL_FDCAN_ConfigFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <FDCAN_Config+0x36>
   {
	 /* Filter configuration Error */
	 Error_Handler();
 800087a:	f000 fb13 	bl	8000ea4 <Error_Handler>
   }

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800087e:	2301      	movs	r3, #1
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	2202      	movs	r2, #2
 8000886:	2102      	movs	r1, #2
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <FDCAN_Config+0xd4>)
 800088a:	f001 f92d 	bl	8001ae8 <HAL_FDCAN_ConfigGlobalFilter>

  // 6,2 working for a bit
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 6, 2) != HAL_OK)
 800088e:	2202      	movs	r2, #2
 8000890:	2106      	movs	r1, #6
 8000892:	4822      	ldr	r0, [pc, #136]	; (800091c <FDCAN_Config+0xd4>)
 8000894:	f001 f955 	bl	8001b42 <HAL_FDCAN_ConfigTxDelayCompensation>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <FDCAN_Config+0x5a>
	{
	  Error_Handler();
 800089e:	f000 fb01 	bl	8000ea4 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <FDCAN_Config+0xd4>)
 80008a4:	f001 f971 	bl	8001b8a <HAL_FDCAN_EnableTxDelayCompensation>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <FDCAN_Config+0x6a>
	{
	  Error_Handler();
 80008ae:	f000 faf9 	bl	8000ea4 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80008b2:	481a      	ldr	r0, [pc, #104]	; (800091c <FDCAN_Config+0xd4>)
 80008b4:	f001 f98c 	bl	8001bd0 <HAL_FDCAN_Start>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <FDCAN_Config+0x7a>
	{
	  Error_Handler();
 80008be:	f000 faf1 	bl	8000ea4 <Error_Handler>
	}

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	4815      	ldr	r0, [pc, #84]	; (800091c <FDCAN_Config+0xd4>)
 80008c8:	f001 fb76 	bl	8001fb8 <HAL_FDCAN_ActivateNotification>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <FDCAN_Config+0x8e>
  {
	  Error_Handler();
 80008d2:	f000 fae7 	bl	8000ea4 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <FDCAN_Config+0xd8>)
 80008d8:	f240 3221 	movw	r2, #801	; 0x321
 80008dc:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <FDCAN_Config+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <FDCAN_Config+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <FDCAN_Config+0xd8>)
 80008ec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80008f0:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <FDCAN_Config+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <FDCAN_Config+0xd8>)
 80008fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008fe:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <FDCAN_Config+0xd8>)
 8000902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000906:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <FDCAN_Config+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <FDCAN_Config+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240004c4 	.word	0x240004c4
 8000920:	240005e4 	.word	0x240005e4

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint32_t tick = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
	  uint16_t i=0;
 800092e:	2300      	movs	r3, #0
 8000930:	817b      	strh	r3, [r7, #10]
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000938:	bf00      	nop
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <main+0xfc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <main+0x2c>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf4      	bgt.n	800093a <main+0x16>
  if ( timeout < 0 )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <main+0x36>
  {
  Error_Handler();
 8000956:	f000 faa5 	bl	8000ea4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fc9b 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f86b 	bl	8000a38 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <main+0xfc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <main+0xfc>)
 800096a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <main+0xfc>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000980:	2000      	movs	r0, #0
 8000982:	f002 fa85 	bl	8002e90 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f002 fa9b 	bl	8002ec4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000994:	bf00      	nop
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <main+0xfc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <main+0x88>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf4      	bgt.n	8000996 <main+0x72>
if ( timeout < 0 )
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	da01      	bge.n	80009b6 <main+0x92>
{
Error_Handler();
 80009b2:	f000 fa77 	bl	8000ea4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f9ab 	bl	8000d10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ba:	f000 f92b 	bl	8000c14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009be:	f000 f975 	bl	8000cac <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 80009c2:	f000 f8c3 	bl	8000b4c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  fd_can_init();
 80009c6:	f7ff fed9 	bl	800077c <fd_can_init>
  FDCAN_Config();
 80009ca:	f7ff ff3d 	bl	8000848 <FDCAN_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(systick - tick > 50)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <main+0x100>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b32      	cmp	r3, #50	; 0x32
 80009d8:	d915      	bls.n	8000a06 <main+0xe2>
      {
    	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009da:	2101      	movs	r1, #1
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <main+0x104>)
 80009de:	f002 fa3c 	bl	8002e5a <HAL_GPIO_TogglePin>
    	  tick = systick;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <main+0x100>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	60fb      	str	r3, [r7, #12]
          if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80009e8:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <main+0x108>)
 80009ea:	4911      	ldr	r1, [pc, #68]	; (8000a30 <main+0x10c>)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <main+0x110>)
 80009ee:	f001 f91a 	bl	8001c26 <HAL_FDCAN_AddMessageToTxFifoQ>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <main+0xde>
    	         {
        	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <main+0x104>)
 80009fe:	f002 fa2c 	bl	8002e5a <HAL_GPIO_TogglePin>
    	         }
    		           Error_Handler();
 8000a02:	f000 fa4f 	bl	8000ea4 <Error_Handler>
   		         }
     	   TxData[1] = i>>8;
 8000a06:	897b      	ldrh	r3, [r7, #10]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <main+0x108>)
 8000a10:	705a      	strb	r2, [r3, #1]
    	   TxData[0] = i++;
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	817a      	strh	r2, [r7, #10]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <main+0x108>)
 8000a1c:	701a      	strb	r2, [r3, #0]
	  if(systick - tick > 50)
 8000a1e:	e7d6      	b.n	80009ce <main+0xaa>
 8000a20:	58024400 	.word	0x58024400
 8000a24:	24000630 	.word	0x24000630
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	24000564 	.word	0x24000564
 8000a30:	240005e4 	.word	0x240005e4
 8000a34:	240004c4 	.word	0x240004c4

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09c      	sub	sp, #112	; 0x70
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	224c      	movs	r2, #76	; 0x4c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f006 fa10 	bl	8006e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2220      	movs	r2, #32
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f006 fa0a 	bl	8006e6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f002 fb8f 	bl	800317c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <SystemClock_Config+0x108>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <SystemClock_Config+0x108>)
 8000a68:	f023 0301 	bic.w	r3, r3, #1
 8000a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <SystemClock_Config+0x108>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <SystemClock_Config+0x10c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a80:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <SystemClock_Config+0x10c>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <SystemClock_Config+0x10c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a94:	bf00      	nop
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <SystemClock_Config+0x10c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa2:	d1f8      	bne.n	8000a96 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <SystemClock_Config+0x110>)
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f023 0303 	bic.w	r3, r3, #3
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <SystemClock_Config+0x110>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000ad2:	2312      	movs	r3, #18
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ada:	2303      	movs	r3, #3
 8000adc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000aea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fbab 	bl	8003250 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b00:	f000 f9d0 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	233f      	movs	r3, #63	; 0x3f
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 ffa1 	bl	8003a70 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000b34:	f000 f9b6 	bl	8000ea4 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	; 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58000400 	.word	0x58000400
 8000b44:	58024800 	.word	0x58024800
 8000b48:	58024400 	.word	0x58024400

08000b4c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b52:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <MX_FDCAN1_Init+0xc4>)
 8000b54:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 59;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b82:	223b      	movs	r2, #59	; 0x3b
 8000b84:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b88:	2214      	movs	r2, #20
 8000b8a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_FDCAN1_Init+0xc0>)
 8000bfa:	f000 fd1d 	bl	8001638 <HAL_FDCAN_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c04:	f000 f94e 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240004c4 	.word	0x240004c4
 8000c10:	4000a000 	.word	0x4000a000

08000c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_USART3_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f004 fdf5 	bl	800584c <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f91c 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c70:	f005 fd42 	bl	80066f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f913 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c82:	f005 fd77 	bl	8006774 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f90a 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_USART3_UART_Init+0x90>)
 8000c92:	f005 fcf8 	bl	8006686 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f902 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400002c 	.word	0x2400002c
 8000ca8:	40004800 	.word	0x40004800

08000cac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb8:	2209      	movs	r2, #9
 8000cba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cca:	2202      	movs	r2, #2
 8000ccc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	f002 f8fa 	bl	8002eec <HAL_PCD_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cfe:	f000 f8d1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	240000bc 	.word	0x240000bc
 8000d0c:	40080000 	.word	0x40080000

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	4a58      	ldr	r2, [pc, #352]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	4a51      	ldr	r2, [pc, #324]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d54:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a3a      	ldr	r2, [pc, #232]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <MX_GPIO_Init+0x180>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000de0:	482c      	ldr	r0, [pc, #176]	; (8000e94 <MX_GPIO_Init+0x184>)
 8000de2:	f002 f821 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000de6:	2332      	movs	r3, #50	; 0x32
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x188>)
 8000e02:	f001 fe61 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e06:	2386      	movs	r3, #134	; 0x86
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481e      	ldr	r0, [pc, #120]	; (8000e9c <MX_GPIO_Init+0x18c>)
 8000e22:	f001 fe51 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e26:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4815      	ldr	r0, [pc, #84]	; (8000e94 <MX_GPIO_Init+0x184>)
 8000e40:	f001 fe42 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0x184>)
 8000e62:	f001 fe31 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_GPIO_Init+0x190>)
 8000e84:	f001 fe20 	bl	8002ac8 <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020400 	.word	0x58020400
 8000e98:	58020800 	.word	0x58020800
 8000e9c:	58020000 	.word	0x58020000
 8000ea0:	58021800 	.word	0x58021800

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0b8      	sub	sp, #224	; 0xe0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	22bc      	movs	r2, #188	; 0xbc
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 ffaf 	bl	8006e6c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <HAL_FDCAN_MspInit+0x100>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d162      	bne.n	8000fde <HAL_FDCAN_MspInit+0xf6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000f22:	2314      	movs	r3, #20
 8000f24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f32:	23c0      	movs	r3, #192	; 0xc0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f36:	2320      	movs	r3, #32
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000f3e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 f91d 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000f54:	f7ff ffa6 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_FDCAN_MspInit+0x104>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fac:	2309      	movs	r3, #9
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <HAL_FDCAN_MspInit+0x108>)
 8000fba:	f001 fd85 	bl	8002ac8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2013      	movs	r0, #19
 8000fc4:	f000 fb03 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fc8:	2013      	movs	r0, #19
 8000fca:	f000 fb1a 	bl	8001602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2015      	movs	r0, #21
 8000fd4:	f000 fafb 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fd8:	2015      	movs	r0, #21
 8000fda:	f000 fb12 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37e0      	adds	r7, #224	; 0xe0
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	4000a000 	.word	0x4000a000
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020c00 	.word	0x58020c00

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b8      	sub	sp, #224	; 0xe0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	22bc      	movs	r2, #188	; 0xbc
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 ff29 	bl	8006e6c <memset>
  if(huart->Instance==USART3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <HAL_UART_MspInit+0xc0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d142      	bne.n	80010aa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f8a8 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff ff31 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0xc4>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800107e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_UART_MspInit+0xc8>)
 80010a6:	f001 fd0f 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	37e0      	adds	r7, #224	; 0xe0
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004800 	.word	0x40004800
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020c00 	.word	0x58020c00

080010c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0b8      	sub	sp, #224	; 0xe0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	22bc      	movs	r2, #188	; 0xbc
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fec3 	bl	8006e6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_PCD_MspInit+0xe8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d156      	bne.n	800119e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f840 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800110e:	f7ff fec9 	bl	8000ea4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001112:	f002 f88d 	bl	8003230 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_PCD_MspInit+0xec>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_PCD_MspInit+0xec>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_PCD_MspInit+0xec>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001134:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800114e:	230a      	movs	r3, #10
 8001150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001158:	4619      	mov	r1, r3
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <HAL_PCD_MspInit+0xf0>)
 800115c:	f001 fcb4 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_PCD_MspInit+0xf0>)
 800117c:	f001 fca4 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_PCD_MspInit+0xec>)
 8001182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_PCD_MspInit+0xec>)
 8001188:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800118c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_PCD_MspInit+0xec>)
 8001192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37e0      	adds	r7, #224	; 0xe0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40080000 	.word	0x40080000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020000 	.word	0x58020000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8ba 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick++;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <SysTick_Handler+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a02      	ldr	r2, [pc, #8]	; (8001214 <SysTick_Handler+0x18>)
 800120c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000630 	.word	0x24000630

08001218 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <FDCAN1_IT0_IRQHandler+0x10>)
 800121e:	f000 ff45 	bl	80020ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240004c4 	.word	0x240004c4

0800122c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <FDCAN1_IT1_IRQHandler+0x10>)
 8001232:	f000 ff3b 	bl	80020ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240004c4 	.word	0x240004c4

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff f9c4 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f005 fdcb 	bl	8006e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fb57 	bl	8000924 <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001284:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 8001288:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800128c:	24000638 	.word	0x24000638

08001290 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC3_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f98c 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a0:	f002 fd9c 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f814 	bl	800130c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fde1 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	08006ee0 	.word	0x08006ee0
 8001304:	24000004 	.word	0x24000004
 8001308:	24000000 	.word	0x24000000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f971 	bl	800161e <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f000 f93b 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2400000c 	.word	0x2400000c
 8001370:	24000000 	.word	0x24000000
 8001374:	24000008 	.word	0x24000008

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000634 	.word	0x24000634

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	24000634 	.word	0x24000634

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400000c 	.word	0x2400000c

08001400 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetREVID+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	5c001000 	.word	0x5c001000

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff40 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff33 	bl	800147c <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa4 	bl	8001574 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b098      	sub	sp, #96	; 0x60
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001640:	4a84      	ldr	r2, [pc, #528]	; (8001854 <HAL_FDCAN_Init+0x21c>)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4611      	mov	r1, r2
 8001648:	224c      	movs	r2, #76	; 0x4c
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fc00 	bl	8006e50 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1ca      	b.n	80019f0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_FDCAN_Init+0x220>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d106      	bne.n	8001672 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fc2e 	bl	8000ee8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0210 	bic.w	r2, r2, #16
 800169a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff fe80 	bl	80013a0 <HAL_GetTick>
 80016a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016a2:	e014      	b.n	80016ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016a4:	f7ff fe7c 	bl	80013a0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90d      	bls.n	80016ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e190      	b.n	80019f0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d0e3      	beq.n	80016a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ec:	f7ff fe58 	bl	80013a0 <HAL_GetTick>
 80016f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016f2:	e014      	b.n	800171e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016f4:	f7ff fe54 	bl	80013a0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d90d      	bls.n	800171e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e168      	b.n	80019f0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e3      	beq.n	80016f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0202 	orr.w	r2, r2, #2
 800173a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7c1b      	ldrb	r3, [r3, #16]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	e007      	b.n	8001766 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001764:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7c5b      	ldrb	r3, [r3, #17]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	e007      	b.n	8001790 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800178e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7c9b      	ldrb	r3, [r3, #18]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	e007      	b.n	80017ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80017de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0210 	bic.w	r2, r2, #16
 80017ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0204 	orr.w	r2, r2, #4
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e030      	b.n	800186c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d02c      	beq.n	800186c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d020      	beq.n	800185c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001828:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0210 	orr.w	r2, r2, #16
 8001838:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d114      	bne.n	800186c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	619a      	str	r2, [r3, #24]
 8001852:	e00b      	b.n	800186c <HAL_FDCAN_Init+0x234>
 8001854:	08006e94 	.word	0x08006e94
 8001858:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	3b01      	subs	r3, #1
 8001872:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	3b01      	subs	r3, #1
 800187a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800187c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001884:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	3b01      	subs	r3, #1
 800188e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001894:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001896:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a0:	d115      	bne.n	80018ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	3b01      	subs	r3, #1
 80018ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	3b01      	subs	r3, #1
 80018b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	4413      	add	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d012      	beq.n	8001920 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001902:	f023 0107 	bic.w	r1, r3, #7
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001910:	4413      	add	r3, r2
 8001912:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d012      	beq.n	800194e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001930:	f023 0107 	bic.w	r1, r3, #7
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800193e:	4413      	add	r3, r2
 8001940:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	2b00      	cmp	r3, #0
 8001954:	d013      	beq.n	800197e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800195e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800196c:	4413      	add	r3, r2
 800196e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001972:	011a      	lsls	r2, r3, #4
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d013      	beq.n	80019ae <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800198e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800199c:	4413      	add	r3, r2
 800199e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019a2:	021a      	lsls	r2, r3, #8
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_FDCAN_Init+0x3c0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d107      	bne.n	80019c8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f022 0203 	bic.w	r2, r2, #3
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fe6d 	bl	80026c0 <FDCAN_CalcultateRamBlockAddresses>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80019ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3760      	adds	r7, #96	; 0x60
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	4000a000 	.word	0x4000a000

080019fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a0c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d002      	beq.n	8001a1a <HAL_FDCAN_ConfigFilter+0x1e>
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d157      	bne.n	8001aca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d12b      	bne.n	8001a7a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d10d      	bne.n	8001a46 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a36:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a3c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001a3e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00e      	b.n	8001a64 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a52:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001a5a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e025      	b.n	8001ac6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	075a      	lsls	r2, r3, #29
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d103      	bne.n	8001a98 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e006      	b.n	8001aa6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	079a      	lsls	r2, r3, #30
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3304      	adds	r3, #4
 8001abe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e008      	b.n	8001adc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ad0:	f043 0202 	orr.w	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
  }
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d110      	bne.n	8001b24 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b0a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001b10:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e008      	b.n	8001b36 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b2a:	f043 0204 	orr.w	r2, r3, #4
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	0219      	lsls	r1, r3, #8
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e008      	b.n	8001b7e <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b72:	f043 0204 	orr.w	r2, r3, #4
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d109      	bne.n	8001bb2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bac:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e008      	b.n	8001bc4 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d111      	bne.n	8001c08 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e008      	b.n	8001c1a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d141      	bne.n	8001cc2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c46:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e038      	b.n	8001cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e026      	b.n	8001cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fe95 	bl	80029cc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e008      	b.n	8001cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cc8:	f043 0208 	orr.w	r2, r3, #8
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cf4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001cf6:	7efb      	ldrb	r3, [r7, #27]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	f040 814b 	bne.w	8001f94 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	d14d      	bne.n	8001da0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d1a:	f043 0220 	orr.w	r2, r3, #32
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e13e      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e12c      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d54:	0e1b      	lsrs	r3, r3, #24
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10b      	bne.n	8001d76 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d66:	0fdb      	lsrs	r3, r3, #31
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d70:	d101      	bne.n	8001d76 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	69f9      	ldr	r1, [r7, #28]
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e069      	b.n	8001e74 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b41      	cmp	r3, #65	; 0x41
 8001da4:	d14d      	bne.n	8001e42 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0ed      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001de0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0db      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001df6:	0e1b      	lsrs	r3, r3, #24
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d10b      	bne.n	8001e18 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e08:	0fdb      	lsrs	r3, r3, #31
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e12:	d101      	bne.n	8001e18 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001e14:	2301      	movs	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	69f9      	ldr	r1, [r7, #28]
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	e018      	b.n	8001e74 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d309      	bcc.n	8001e60 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0a2      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e005      	b.n	8001ea4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e1b      	lsrs	r3, r3, #24
 8001ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0fda      	lsrs	r2, r3, #31
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
 8001f16:	e00a      	b.n	8001f2e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	440b      	add	r3, r1
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d3eb      	bcc.n	8001f18 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d105      	bne.n	8001f52 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001f50:	e01e      	b.n	8001f90 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b41      	cmp	r3, #65	; 0x41
 8001f56:	d105      	bne.n	8001f64 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001f62:	e015      	b.n	8001f90 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b1f      	cmp	r3, #31
 8001f68:	d808      	bhi.n	8001f7c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001f7a:	e009      	b.n	8001f90 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 021f 	and.w	r2, r3, #31
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e008      	b.n	8001fa6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f9a:	f043 0208 	orr.w	r2, r3, #8
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	372c      	adds	r7, #44	; 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	08006ef0 	.word	0x08006ef0

08001fb8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <HAL_FDCAN_ActivateNotification+0x20>
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d155      	bne.n	8002084 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ff6:	e014      	b.n	8002022 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	d108      	bne.n	800201a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0202 	orr.w	r2, r2, #2
 8002016:	65da      	str	r2, [r3, #92]	; 0x5c
 8002018:	e003      	b.n	8002022 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2203      	movs	r2, #3
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	430a      	orrs	r2, r1
 800203c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	430a      	orrs	r2, r1
 800205a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_FDCAN_ActivateNotification+0xec>)
 8002068:	4013      	ands	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	430b      	orrs	r3, r1
 8002070:	6553      	str	r3, [r2, #84]	; 0x54
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0f9b      	lsrs	r3, r3, #30
 800207a:	490b      	ldr	r1, [pc, #44]	; (80020a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800207c:	4313      	orrs	r3, r2
 800207e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e008      	b.n	8002096 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	3fcfffff 	.word	0x3fcfffff
 80020a8:	4000a800 	.word	0x4000a800

080020ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b092      	sub	sp, #72	; 0x48
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80020b4:	4b90      	ldr	r3, [pc, #576]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	079b      	lsls	r3, r3, #30
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80020bc:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	079b      	lsls	r3, r3, #30
 80020c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020c4:	4013      	ands	r3, r2
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020dc:	4013      	ands	r3, r2
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f4:	4013      	ands	r3, r2
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800210c:	4013      	ands	r3, r2
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002116:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002124:	4013      	ands	r3, r2
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213c:	4013      	ands	r3, r2
 800213e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d011      	beq.n	8002172 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002164:	651a      	str	r2, [r3, #80]	; 0x50
 8002166:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fa5a 	bl	8002626 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01e      	beq.n	80021be <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80021a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a2:	4013      	ands	r3, r2
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80021b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fa0b 	bl	80025d4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_FDCAN_IRQHandler+0x250>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	6513      	str	r3, [r2, #80]	; 0x50
 80021d0:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80021d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d4:	0f9b      	lsrs	r3, r3, #30
 80021d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80021d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9c4 	bl	8002568 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80021e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021ec:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_FDCAN_IRQHandler+0x250>)
 80021ee:	400b      	ands	r3, r1
 80021f0:	6513      	str	r3, [r2, #80]	; 0x50
 80021f2:	4a41      	ldr	r2, [pc, #260]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	0f9b      	lsrs	r3, r3, #30
 80021f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80021fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f9be 	bl	800257e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_FDCAN_IRQHandler+0x250>)
 8002210:	400b      	ands	r3, r1
 8002212:	6513      	str	r3, [r2, #80]	; 0x50
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 8002216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002218:	0f9b      	lsrs	r3, r3, #30
 800221a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800221c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fa70 	bl	8000704 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002230:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_FDCAN_IRQHandler+0x250>)
 8002232:	400b      	ands	r3, r1
 8002234:	6513      	str	r3, [r2, #80]	; 0x50
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	0f9b      	lsrs	r3, r3, #30
 800223c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800223e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9a7 	bl	8002594 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002250:	2b00      	cmp	r3, #0
 8002252:	d011      	beq.n	8002278 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226a:	651a      	str	r2, [r3, #80]	; 0x50
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f999 	bl	80025aa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01e      	beq.n	80022c4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a8:	4013      	ands	r3, r2
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b4:	651a      	str	r2, [r3, #80]	; 0x50
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80022bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f97d 	bl	80025be <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00f      	beq.n	8002300 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
 80022ea:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_FDCAN_IRQHandler+0x24c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f97a 	bl	80025ea <HAL_FDCAN_RxBufferNewMessageCallback>
 80022f6:	e003      	b.n	8002300 <HAL_FDCAN_IRQHandler+0x254>
 80022f8:	4000a800 	.word	0x4000a800
 80022fc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d011      	beq.n	8002332 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002324:	651a      	str	r2, [r3, #80]	; 0x50
 8002326:	4b8d      	ldr	r3, [pc, #564]	; (800255c <HAL_FDCAN_IRQHandler+0x4b0>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f966 	bl	80025fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d011      	beq.n	8002364 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
 8002358:	4b80      	ldr	r3, [pc, #512]	; (800255c <HAL_FDCAN_IRQHandler+0x4b0>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f957 	bl	8002612 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002388:	651a      	str	r2, [r3, #80]	; 0x50
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <HAL_FDCAN_IRQHandler+0x4b0>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002396:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_FDCAN_IRQHandler+0x4b4>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	6513      	str	r3, [r2, #80]	; 0x50
 80023b2:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_FDCAN_IRQHandler+0x4b0>)
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	0f9b      	lsrs	r3, r3, #30
 80023b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80023ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f946 	bl	800264e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d011      	beq.n	80023ec <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_FDCAN_IRQHandler+0x4b4>)
 80023d0:	400b      	ands	r3, r1
 80023d2:	6513      	str	r3, [r2, #80]	; 0x50
 80023d4:	4a61      	ldr	r2, [pc, #388]	; (800255c <HAL_FDCAN_IRQHandler+0x4b0>)
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	0f9b      	lsrs	r3, r3, #30
 80023da:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <HAL_FDCAN_IRQHandler+0x4b8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f040 80a6 	bne.w	8002544 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 809e 	beq.w	8002544 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	4013      	ands	r3, r2
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800242a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	4013      	ands	r3, r2
 8002436:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002442:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	4013      	ands	r3, r2
 800244e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800245a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002472:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800248e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f8e7 	bl	8002664 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8e7 	bl	800267a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d014      	beq.n	80024f2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024de:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6939      	ldr	r1, [r7, #16]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8cf 	bl	8002690 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002500:	69f9      	ldr	r1, [r7, #28]
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8d0 	bl	80026a8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f873 	bl	800263a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002554:	bf00      	nop
 8002556:	3748      	adds	r7, #72	; 0x48
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	4000a800 	.word	0x4000a800
 8002560:	3fcfffff 	.word	0x3fcfffff
 8002564:	4000a000 	.word	0x4000a000

08002568 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026d6:	4ba7      	ldr	r3, [pc, #668]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	0091      	lsls	r1, r2, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002716:	4b97      	ldr	r3, [pc, #604]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002718:	4013      	ands	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	0091      	lsls	r1, r2, #2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	430b      	orrs	r3, r1
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002758:	4b86      	ldr	r3, [pc, #536]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	0091      	lsls	r1, r2, #2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002772:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	041a      	lsls	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4413      	add	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027a0:	4b74      	ldr	r3, [pc, #464]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	0091      	lsls	r1, r2, #2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	0091      	lsls	r1, r2, #2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002816:	4013      	ands	r3, r2
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	0091      	lsls	r1, r2, #2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800282e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	041a      	lsls	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4413      	add	r3, r2
 800284c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002858:	4013      	ands	r3, r2
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	0091      	lsls	r1, r2, #2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	430b      	orrs	r3, r1
 8002864:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002870:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800288c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	061a      	lsls	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80028a6:	4413      	add	r3, r2
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d915      	bls.n	800299c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002970:	e006      	b.n	8002980 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002972:	bf00      	nop
 8002974:	ffff0003 	.word	0xffff0003
 8002978:	10002b00 	.word	0x10002b00
 800297c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2203      	movs	r2, #3
 8002994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e010      	b.n	80029be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e005      	b.n	80029b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3304      	adds	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d3f3      	bcc.n	80029a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80029ea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e00a      	b.n	8002a0e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a00:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a06:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a18:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002a1e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002a24:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e020      	b.n	8002aa4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3303      	adds	r3, #3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3302      	adds	r3, #2
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	440b      	add	r3, r1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002a7a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	440b      	add	r3, r1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002a88:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	440a      	add	r2, r1
 8002a90:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002a92:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <FDCAN_CopyMessageToRAM+0xf8>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d3d5      	bcc.n	8002a62 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	3724      	adds	r7, #36	; 0x24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	08006ef0 	.word	0x08006ef0

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <HAL_GPIO_Init+0x234>)
 8002ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ada:	e194      	b.n	8002e06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8186 	beq.w	8002e00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00b      	beq.n	8002b14 <HAL_GPIO_Init+0x4c>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d007      	beq.n	8002b14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b08:	2b11      	cmp	r3, #17
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b12      	cmp	r3, #18
 8002b12:	d130      	bne.n	8002b76 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0201 	and.w	r2, r3, #1
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0xee>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d123      	bne.n	8002bfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	220f      	movs	r2, #15
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	69b9      	ldr	r1, [r7, #24]
 8002bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0203 	and.w	r2, r3, #3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80e0 	beq.w	8002e00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_GPIO_Init+0x238>)
 8002c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c46:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x238>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_GPIO_Init+0x238>)
 8002c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5e:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_GPIO_Init+0x23c>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_GPIO_Init+0x240>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d052      	beq.n	8002d30 <HAL_GPIO_Init+0x268>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_GPIO_Init+0x244>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_GPIO_Init+0x22e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <HAL_GPIO_Init+0x248>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x22a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x24c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x226>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_GPIO_Init+0x250>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x222>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <HAL_GPIO_Init+0x254>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x21e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x258>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x21a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_GPIO_Init+0x25c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x216>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_GPIO_Init+0x260>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x212>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_GPIO_Init+0x264>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x20e>
 8002cd2:	2309      	movs	r3, #9
 8002cd4:	e02d      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	e02b      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e029      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e027      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e025      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	e023      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e021      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e01f      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e01d      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e01b      	b.n	8002d32 <HAL_GPIO_Init+0x26a>
 8002cfa:	bf00      	nop
 8002cfc:	58000080 	.word	0x58000080
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58000400 	.word	0x58000400
 8002d08:	58020000 	.word	0x58020000
 8002d0c:	58020400 	.word	0x58020400
 8002d10:	58020800 	.word	0x58020800
 8002d14:	58020c00 	.word	0x58020c00
 8002d18:	58021000 	.word	0x58021000
 8002d1c:	58021400 	.word	0x58021400
 8002d20:	58021800 	.word	0x58021800
 8002d24:	58021c00 	.word	0x58021c00
 8002d28:	58022000 	.word	0x58022000
 8002d2c:	58022400 	.word	0x58022400
 8002d30:	2300      	movs	r3, #0
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f002 0203 	and.w	r2, r2, #3
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	4093      	lsls	r3, r2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d42:	4938      	ldr	r1, [pc, #224]	; (8002e24 <HAL_GPIO_Init+0x35c>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3301      	adds	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f ae63 	bne.w	8002adc <HAL_GPIO_Init+0x14>
  }
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	3724      	adds	r7, #36	; 0x24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	58000400 	.word	0x58000400

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	619a      	str	r2, [r3, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_HSEM_FastTake+0x2c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_HSEM_FastTake+0x30>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	58026400 	.word	0x58026400
 8002ec0:	80000300 	.word	0x80000300

08002ec4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002ece:	4906      	ldr	r1, [pc, #24]	; (8002ee8 <HAL_HSEM_Release+0x24>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	58026400 	.word	0x58026400

08002eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	b08f      	sub	sp, #60	; 0x3c
 8002ef0:	af0a      	add	r7, sp, #40	; 0x28
 8002ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e116      	b.n	800312c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe f8d1 	bl	80010c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fd13 	bl	8006968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	687e      	ldr	r6, [r7, #4]
 8002f4a:	466d      	mov	r5, sp
 8002f4c:	f106 0410 	add.w	r4, r6, #16
 8002f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f60:	1d33      	adds	r3, r6, #4
 8002f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f64:	6838      	ldr	r0, [r7, #0]
 8002f66:	f003 fc91 	bl	800688c <USB_CoreInit>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0d7      	b.n	800312c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fd01 	bl	800698a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e04a      	b.n	8003024 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	333d      	adds	r3, #61	; 0x3d
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	333c      	adds	r3, #60	; 0x3c
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	b298      	uxth	r0, r3
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3342      	adds	r3, #66	; 0x42
 8002fca:	4602      	mov	r2, r0
 8002fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	333f      	adds	r3, #63	; 0x3f
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3344      	adds	r3, #68	; 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3350      	adds	r3, #80	; 0x50
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	3301      	adds	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d3af      	bcc.n	8002f8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e044      	b.n	80030be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3b5      	bcc.n	8003034 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	687e      	ldr	r6, [r7, #4]
 80030d0:	466d      	mov	r5, sp
 80030d2:	f106 0410 	add.w	r4, r6, #16
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e6:	1d33      	adds	r3, r6, #4
 80030e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f003 fc78 	bl	80069e0 <USB_DevInit>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e014      	b.n	800312c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f80a 	bl	8003134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fe1a 	bl	8006d5e <USB_DevDisconnect>

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_PCDEx_ActivateLPM+0x44>)
 8003164:	4313      	orrs	r3, r2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	10000003 	.word	0x10000003

0800317c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	2b06      	cmp	r3, #6
 800318e:	d00a      	beq.n	80031a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e040      	b.n	8003224 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e03e      	b.n	8003224 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031ae:	491f      	ldr	r1, [pc, #124]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031b6:	f7fe f8f3 	bl	80013a0 <HAL_GetTick>
 80031ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031bc:	e009      	b.n	80031d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031be:	f7fe f8ef 	bl	80013a0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031cc:	d901      	bls.n	80031d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e028      	b.n	8003224 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031de:	d1ee      	bne.n	80031be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b1e      	cmp	r3, #30
 80031e4:	d008      	beq.n	80031f8 <HAL_PWREx_ConfigSupply+0x7c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b2e      	cmp	r3, #46	; 0x2e
 80031ea:	d005      	beq.n	80031f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b1d      	cmp	r3, #29
 80031f0:	d002      	beq.n	80031f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b2d      	cmp	r3, #45	; 0x2d
 80031f6:	d114      	bne.n	8003222 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031f8:	f7fe f8d2 	bl	80013a0 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031fe:	e009      	b.n	8003214 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003200:	f7fe f8ce 	bl	80013a0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320e:	d901      	bls.n	8003214 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_PWREx_ConfigSupply+0xb0>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d1ee      	bne.n	8003200 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	58024800 	.word	0x58024800

08003230 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	58024800 	.word	0x58024800

08003250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08c      	sub	sp, #48	; 0x30
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e3ff      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003270:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800327a:	4b97      	ldr	r3, [pc, #604]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	2b10      	cmp	r3, #16
 8003284:	d007      	beq.n	8003296 <HAL_RCC_OscConfig+0x46>
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	2b18      	cmp	r3, #24
 800328a:	d110      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d10b      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06c      	beq.n	800337c <HAL_RCC_OscConfig+0x12c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d168      	bne.n	800337c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e3d9      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x76>
 80032b8:	4b87      	ldr	r3, [pc, #540]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a86      	ldr	r2, [pc, #536]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x98>
 80032ce:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a81      	ldr	r2, [pc, #516]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7e      	ldr	r2, [pc, #504]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xbc>
 80032f2:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 800330c:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe f838 	bl	80013a0 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe f834 	bl	80013a0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e38d      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003346:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xe4>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f824 	bl	80013a0 <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe f820 	bl	80013a0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e379      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x10c>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80ae 	beq.w	80034e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_RCC_OscConfig+0x162>
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2b18      	cmp	r3, #24
 80033a6:	d13a      	bne.n	800341e <HAL_RCC_OscConfig+0x1ce>
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d135      	bne.n	800341e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RCC_OscConfig+0x17a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e34b      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	f7fe f819 	bl	8001400 <HAL_GetREVID>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d817      	bhi.n	8003408 <HAL_RCC_OscConfig+0x1b8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d108      	bne.n	80033f2 <HAL_RCC_OscConfig+0x1a2>
 80033e0:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033e8:	4a3b      	ldr	r2, [pc, #236]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f0:	e07a      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	031b      	lsls	r3, r3, #12
 8003400:	4935      	ldr	r1, [pc, #212]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003406:	e06f      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	4930      	ldr	r1, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	e064      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d045      	beq.n	80034b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0219 	bic.w	r2, r3, #25
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4929      	ldr	r1, [pc, #164]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fd ffb2 	bl	80013a0 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003440:	f7fd ffae 	bl	80013a0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e307      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	f7fd ffcf 	bl	8001400 <HAL_GetREVID>
 8003462:	4603      	mov	r3, r0
 8003464:	f241 0203 	movw	r2, #4099	; 0x1003
 8003468:	4293      	cmp	r3, r2
 800346a:	d817      	bhi.n	800349c <HAL_RCC_OscConfig+0x24c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d108      	bne.n	8003486 <HAL_RCC_OscConfig+0x236>
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003482:	6053      	str	r3, [r2, #4]
 8003484:	e030      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	031b      	lsls	r3, r3, #12
 8003494:	4910      	ldr	r1, [pc, #64]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	e025      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	490b      	ldr	r1, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
 80034b0:	e01a      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x288>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd ff6f 	bl	80013a0 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fd ff6b 	bl	80013a0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d903      	bls.n	80034dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e2c4      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
 80034d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034dc:	4ba4      	ldr	r3, [pc, #656]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a9 	beq.w	8003648 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b9e      	ldr	r3, [pc, #632]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003500:	4b9b      	ldr	r3, [pc, #620]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d007      	beq.n	800351c <HAL_RCC_OscConfig+0x2cc>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b18      	cmp	r3, #24
 8003510:	d13a      	bne.n	8003588 <HAL_RCC_OscConfig+0x338>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d135      	bne.n	8003588 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800351c:	4b94      	ldr	r3, [pc, #592]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x2e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e296      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003534:	f7fd ff64 	bl	8001400 <HAL_GetREVID>
 8003538:	4603      	mov	r3, r0
 800353a:	f241 0203 	movw	r2, #4099	; 0x1003
 800353e:	4293      	cmp	r3, r2
 8003540:	d817      	bhi.n	8003572 <HAL_RCC_OscConfig+0x322>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0x30c>
 800354a:	4b89      	ldr	r3, [pc, #548]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003552:	4a87      	ldr	r2, [pc, #540]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003558:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800355a:	e075      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800355c:	4b84      	ldr	r3, [pc, #528]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	069b      	lsls	r3, r3, #26
 800356a:	4981      	ldr	r1, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003570:	e06a      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003572:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	497b      	ldr	r1, [pc, #492]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003586:	e05f      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d042      	beq.n	8003616 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003590:	4b77      	ldr	r3, [pc, #476]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a76      	ldr	r2, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd ff00 	bl	80013a0 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035a4:	f7fd fefc 	bl	80013a0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e255      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035b6:	4b6e      	ldr	r3, [pc, #440]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035c2:	f7fd ff1d 	bl	8001400 <HAL_GetREVID>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d817      	bhi.n	8003600 <HAL_RCC_OscConfig+0x3b0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x39a>
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035e0:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80035e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e02e      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
 80035ea:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	069b      	lsls	r3, r3, #26
 80035f8:	495d      	ldr	r1, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
 80035fe:	e023      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
 8003600:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	4958      	ldr	r1, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e018      	b.n	8003648 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd febd 	bl	80013a0 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800362a:	f7fd feb9 	bl	80013a0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e212      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d036      	beq.n	80036c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003660:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fe9a 	bl	80013a0 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd fe96 	bl	80013a0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1ef      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x420>
 800368e:	e018      	b.n	80036c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003694:	4a36      	ldr	r2, [pc, #216]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fe80 	bl	80013a0 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fd fe7c 	bl	80013a0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1d5      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d036      	beq.n	800373c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d019      	beq.n	800370a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80036dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fe5d 	bl	80013a0 <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036ea:	f7fd fe59 	bl	80013a0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e1b2      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x49a>
 8003708:	e018      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003714:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003716:	f7fd fe43 	bl	80013a0 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800371e:	f7fd fe3f 	bl	80013a0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e198      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x520>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8085 	beq.w	8003854 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_OscConfig+0x524>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x524>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003756:	f7fd fe23 	bl	80013a0 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800375c:	e00c      	b.n	8003778 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fe1f 	bl	80013a0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b64      	cmp	r3, #100	; 0x64
 800376a:	d905      	bls.n	8003778 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e178      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
 8003770:	58024400 	.word	0x58024400
 8003774:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003778:	4b96      	ldr	r3, [pc, #600]	; (80039d4 <HAL_RCC_OscConfig+0x784>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ec      	beq.n	800375e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x54a>
 800378c:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a91      	ldr	r2, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e02d      	b.n	80037f6 <HAL_RCC_OscConfig+0x5a6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x56c>
 80037a2:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a8c      	ldr	r2, [pc, #560]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	4b8a      	ldr	r3, [pc, #552]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a89      	ldr	r2, [pc, #548]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	e01c      	b.n	80037f6 <HAL_RCC_OscConfig+0x5a6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x58e>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a80      	ldr	r2, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e00b      	b.n	80037f6 <HAL_RCC_OscConfig+0x5a6>
 80037de:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a7d      	ldr	r2, [pc, #500]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d015      	beq.n	800382a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fdcf 	bl	80013a0 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fd fdcb 	bl	80013a0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e122      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381c:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ee      	beq.n	8003806 <HAL_RCC_OscConfig+0x5b6>
 8003828:	e014      	b.n	8003854 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fdb9 	bl	80013a0 <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fd fdb5 	bl	80013a0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003848:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8101 	beq.w	8003a60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800385e:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003866:	2b18      	cmp	r3, #24
 8003868:	f000 80bc 	beq.w	80039e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b02      	cmp	r3, #2
 8003872:	f040 8095 	bne.w	80039a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003876:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800387c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fd8d 	bl	80013a0 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd fd89 	bl	80013a0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0e2      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389c:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80038aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ac:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <HAL_RCC_OscConfig+0x78c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	430a      	orrs	r2, r1
 80038bc:	4946      	ldr	r1, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	628b      	str	r3, [r1, #40]	; 0x28
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	3b01      	subs	r3, #1
 80038c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	3b01      	subs	r3, #1
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	3b01      	subs	r3, #1
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	3b01      	subs	r3, #1
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038f2:	4939      	ldr	r1, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <HAL_RCC_OscConfig+0x790>)
 800390a:	4013      	ands	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003910:	00d2      	lsls	r2, r2, #3
 8003912:	4931      	ldr	r1, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003914:	4313      	orrs	r3, r2
 8003916:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f023 020c 	bic.w	r2, r3, #12
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	492c      	ldr	r1, [pc, #176]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003926:	4313      	orrs	r3, r2
 8003928:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f023 0202 	bic.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4928      	ldr	r1, [pc, #160]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800394e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800395a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fd12 	bl	80013a0 <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd fd0e 	bl	80013a0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e067      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x730>
 800399e:	e05f      	b.n	8003a60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd fcf8 	bl	80013a0 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd fcf4 	bl	80013a0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04d      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCC_OscConfig+0x788>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x764>
 80039d2:	e045      	b.n	8003a60 <HAL_RCC_OscConfig+0x810>
 80039d4:	58024800 	.word	0x58024800
 80039d8:	58024400 	.word	0x58024400
 80039dc:	fffffc0c 	.word	0xfffffc0c
 80039e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039e4:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_RCC_OscConfig+0x81c>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCC_OscConfig+0x81c>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d031      	beq.n	8003a5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d12a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d122      	bne.n	8003a5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	0e1b      	lsrs	r3, r3, #24
 8003a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58024400 	.word	0x58024400

08003a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e19c      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 020f 	bic.w	r2, r3, #15
 8003a9a:	4985      	ldr	r1, [pc, #532]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b83      	ldr	r3, [pc, #524]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e184      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d908      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ad0:	4b78      	ldr	r3, [pc, #480]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4975      	ldr	r1, [pc, #468]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d908      	bls.n	8003b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003afe:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	496a      	ldr	r1, [pc, #424]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b2c:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	495e      	ldr	r1, [pc, #376]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	4b59      	ldr	r3, [pc, #356]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4953      	ldr	r1, [pc, #332]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d010      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	4b4d      	ldr	r3, [pc, #308]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d908      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f023 020f 	bic.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4947      	ldr	r1, [pc, #284]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d055      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4940      	ldr	r1, [pc, #256]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d121      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0f6      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d115      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0ea      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0de      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0d6      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4925      	ldr	r1, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fd fbbd 	bl	80013a0 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2a:	f7fd fbb9 	bl	80013a0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0be      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d1eb      	bne.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d208      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f023 020f 	bic.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	490e      	ldr	r1, [pc, #56]	; (8003cb4 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d214      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 020f 	bic.w	r2, r3, #15
 8003c96:	4906      	ldr	r1, [pc, #24]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_RCC_ClockConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e086      	b.n	8003dbe <HAL_RCC_ClockConfig+0x34e>
 8003cb0:	52002000 	.word	0x52002000
 8003cb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d208      	bcs.n	8003ce6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cd4:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4939      	ldr	r1, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d010      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d208      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d208      	bcs.n	8003d42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4922      	ldr	r1, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d208      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4917      	ldr	r1, [pc, #92]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d70:	f000 f834 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	4912      	ldr	r1, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x35c>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCC_ClockConfig+0x358>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <HAL_RCC_ClockConfig+0x35c>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x360>)
 8003da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x364>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x368>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd faaa 	bl	800130c <HAL_InitTick>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	08006ee0 	.word	0x08006ee0
 8003dd0:	24000004 	.word	0x24000004
 8003dd4:	24000000 	.word	0x24000000
 8003dd8:	24000008 	.word	0x24000008

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b089      	sub	sp, #36	; 0x24
 8003de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de2:	4bb3      	ldr	r3, [pc, #716]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dea:	2b18      	cmp	r3, #24
 8003dec:	f200 8155 	bhi.w	800409a <HAL_RCC_GetSysClockFreq+0x2be>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e5d 	.word	0x08003e5d
 8003dfc:	0800409b 	.word	0x0800409b
 8003e00:	0800409b 	.word	0x0800409b
 8003e04:	0800409b 	.word	0x0800409b
 8003e08:	0800409b 	.word	0x0800409b
 8003e0c:	0800409b 	.word	0x0800409b
 8003e10:	0800409b 	.word	0x0800409b
 8003e14:	0800409b 	.word	0x0800409b
 8003e18:	08003e83 	.word	0x08003e83
 8003e1c:	0800409b 	.word	0x0800409b
 8003e20:	0800409b 	.word	0x0800409b
 8003e24:	0800409b 	.word	0x0800409b
 8003e28:	0800409b 	.word	0x0800409b
 8003e2c:	0800409b 	.word	0x0800409b
 8003e30:	0800409b 	.word	0x0800409b
 8003e34:	0800409b 	.word	0x0800409b
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	0800409b 	.word	0x0800409b
 8003e40:	0800409b 	.word	0x0800409b
 8003e44:	0800409b 	.word	0x0800409b
 8003e48:	0800409b 	.word	0x0800409b
 8003e4c:	0800409b 	.word	0x0800409b
 8003e50:	0800409b 	.word	0x0800409b
 8003e54:	0800409b 	.word	0x0800409b
 8003e58:	08003e8f 	.word	0x08003e8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e5c:	4b94      	ldr	r3, [pc, #592]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d009      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e68:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	4a90      	ldr	r2, [pc, #576]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e7a:	e111      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e7c:	4b8d      	ldr	r3, [pc, #564]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e7e:	61bb      	str	r3, [r7, #24]
    break;
 8003e80:	e10e      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e82:	4b8d      	ldr	r3, [pc, #564]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e84:	61bb      	str	r3, [r7, #24]
    break;
 8003e86:	e10b      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e88:	4b8c      	ldr	r3, [pc, #560]	; (80040bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e8a:	61bb      	str	r3, [r7, #24]
    break;
 8003e8c:	e108      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e98:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003eae:	4b80      	ldr	r3, [pc, #512]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	08db      	lsrs	r3, r3, #3
 8003eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80e1 	beq.w	8004094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f000 8083 	beq.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f200 80a1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x248>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d056      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003eee:	e099      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	ee07 3a90 	vmov	s15, r3
 8003f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f56:	e087      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f9a:	e065      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fae:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fde:	e043      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004002:	ed97 6a02 	vldr	s12, [r7, #8]
 8004006:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004022:	e021      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004046:	ed97 6a02 	vldr	s12, [r7, #8]
 800404a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800404e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004066:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	0a5b      	lsrs	r3, r3, #9
 800406e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004072:	3301      	adds	r3, #1
 8004074:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004080:	edd7 6a07 	vldr	s13, [r7, #28]
 8004084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408c:	ee17 3a90 	vmov	r3, s15
 8004090:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004092:	e005      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    break;
 8004098:	e002      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800409c:	61bb      	str	r3, [r7, #24]
    break;
 800409e:	bf00      	nop
  }

  return sysclockfreq;
 80040a0:	69bb      	ldr	r3, [r7, #24]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
 80040b4:	03d09000 	.word	0x03d09000
 80040b8:	003d0900 	.word	0x003d0900
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	46000000 	.word	0x46000000
 80040c4:	4c742400 	.word	0x4c742400
 80040c8:	4a742400 	.word	0x4a742400
 80040cc:	4af42400 	.word	0x4af42400

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040d6:	f7ff fe81 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_GetHCLKFreq+0x50>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490f      	ldr	r1, [pc, #60]	; (8004124 <HAL_RCC_GetHCLKFreq+0x54>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_GetHCLKFreq+0x50>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_GetHCLKFreq+0x54>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_RCC_GetHCLKFreq+0x58>)
 800410c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_GetHCLKFreq+0x58>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	58024400 	.word	0x58024400
 8004124:	08006ee0 	.word	0x08006ee0
 8004128:	24000004 	.word	0x24000004
 800412c:	24000000 	.word	0x24000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004134:	f7ff ffcc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	08006ee0 	.word	0x08006ee0

0800415c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004160:	f7ff ffb6 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	58024400 	.word	0x58024400
 8004184:	08006ee0 	.word	0x08006ee0

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004194:	2300      	movs	r3, #0
 8004196:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03f      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ac:	d02a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041b2:	d824      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b8:	d018      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041be:	d81e      	bhi.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c8:	d007      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041ca:	e018      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4bab      	ldr	r3, [pc, #684]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4aaa      	ldr	r2, [pc, #680]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041d8:	e015      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 f9cf 	bl	8005584 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041ea:	e00c      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3324      	adds	r3, #36	; 0x24
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fa78 	bl	80056e8 <RCCEx_PLL3_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
      break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800420c:	4b9b      	ldr	r3, [pc, #620]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004218:	4998      	ldr	r1, [pc, #608]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	650b      	str	r3, [r1, #80]	; 0x50
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03d      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	2b04      	cmp	r3, #4
 8004236:	d826      	bhi.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004255 	.word	0x08004255
 8004244:	08004263 	.word	0x08004263
 8004248:	08004275 	.word	0x08004275
 800424c:	0800428d 	.word	0x0800428d
 8004250:	0800428d 	.word	0x0800428d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b89      	ldr	r3, [pc, #548]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a88      	ldr	r2, [pc, #544]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004260:	e015      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f98b 	bl	8005584 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004272:	e00c      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fa34 	bl	80056e8 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
      break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800428c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	f023 0207 	bic.w	r2, r3, #7
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	4976      	ldr	r1, [pc, #472]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	650b      	str	r3, [r1, #80]	; 0x50
 80042a6:	e001      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d042      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c0:	d02b      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d825      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042c8:	2bc0      	cmp	r3, #192	; 0xc0
 80042ca:	d028      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042cc:	2bc0      	cmp	r3, #192	; 0xc0
 80042ce:	d821      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d016      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d81d      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d007      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80042e0:	e018      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e2:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80042ee:	e017      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f944 	bl	8005584 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004300:	e00e      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f9ed 	bl	80056e8 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004312:	e005      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004326:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	4952      	ldr	r1, [pc, #328]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	650b      	str	r3, [r1, #80]	; 0x50
 8004338:	e001      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d049      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004350:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004354:	d030      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800435a:	d82a      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800435c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004360:	d02c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004362:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004366:	d824      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d018      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d81e      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800437c:	d007      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800437e:	e018      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004380:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a3d      	ldr	r2, [pc, #244]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800438c:	e017      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f8f5 	bl	8005584 <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800439e:	e00e      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3324      	adds	r3, #36	; 0x24
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 f99e 	bl	80056e8 <RCCEx_PLL3_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043b0:	e005      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
      break;
 80043b6:	e002      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80043bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043c4:	4b2d      	ldr	r3, [pc, #180]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d2:	492a      	ldr	r1, [pc, #168]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	658b      	str	r3, [r1, #88]	; 0x58
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d04c      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f4:	d030      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80043f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fa:	d82a      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80043fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004400:	d02c      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004402:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004406:	d824      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d018      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004412:	d81e      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800441e:	e018      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b16      	ldr	r3, [pc, #88]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a15      	ldr	r2, [pc, #84]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800442c:	e017      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f001 f8a5 	bl	8005584 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800443e:	e00e      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f94e 	bl	80056e8 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	e002      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800445c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004472:	4902      	ldr	r1, [pc, #8]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	658b      	str	r3, [r1, #88]	; 0x58
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d032      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d01c      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d817      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800449c:	2b20      	cmp	r3, #32
 800449e:	d00c      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d813      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d10f      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ac:	4baf      	ldr	r3, [pc, #700]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4aae      	ldr	r2, [pc, #696]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80044b8:	e00e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 f85f 	bl	8005584 <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80044d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044de:	4ba3      	ldr	r3, [pc, #652]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ea:	49a0      	ldr	r1, [pc, #640]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f0:	e001      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d047      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450a:	d030      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800450c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004510:	d82a      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004516:	d02c      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800451c:	d824      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800451e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004522:	d018      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004528:	d81e      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d007      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004534:	e018      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004536:	4b8d      	ldr	r3, [pc, #564]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a8c      	ldr	r2, [pc, #560]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800453c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004542:	e017      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f81a 	bl	8005584 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004554:	e00e      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3324      	adds	r3, #36	; 0x24
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f001 f8c3 	bl	80056e8 <RCCEx_PLL3_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004566:	e005      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
      break;
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800457a:	4b7c      	ldr	r3, [pc, #496]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	4979      	ldr	r1, [pc, #484]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	650b      	str	r3, [r1, #80]	; 0x50
 800458c:	e001      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d049      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a6:	d02e      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80045a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ac:	d828      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b2:	d02a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80045b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b8:	d822      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045be:	d026      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045c4:	d81c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ca:	d010      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x466>
 80045cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d0:	d816      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01d      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d111      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ffce 	bl	8005584 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045ec:	e012      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3324      	adds	r3, #36	; 0x24
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f877 	bl	80056e8 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045fe:	e009      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
      break;
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004606:	bf00      	nop
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800461a:	4b54      	ldr	r3, [pc, #336]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004626:	4951      	ldr	r1, [pc, #324]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	650b      	str	r3, [r1, #80]	; 0x50
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04b      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004648:	d02e      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800464a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800464e:	d828      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d02a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d822      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800465c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004660:	d026      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004662:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004666:	d81c      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466c:	d010      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004672:	d816      	bhi.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467c:	d111      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 ff7d 	bl	8005584 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800468e:	e012      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3324      	adds	r3, #36	; 0x24
 8004694:	2101      	movs	r1, #1
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f826 	bl	80056e8 <RCCEx_PLL3_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046a0:	e009      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
      break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046ca:	4928      	ldr	r1, [pc, #160]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	658b      	str	r3, [r1, #88]	; 0x58
 80046d0:	e001      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d02f      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ea:	d00e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d814      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d10f      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004708:	e00c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f000 ff37 	bl	8005584 <RCCEx_PLL2_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
      break;
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004736:	490d      	ldr	r1, [pc, #52]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	650b      	str	r3, [r1, #80]	; 0x50
 800473c:	e001      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d033      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	2b03      	cmp	r3, #3
 8004754:	d81c      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004797 	.word	0x08004797
 8004760:	08004771 	.word	0x08004771
 8004764:	0800477f 	.word	0x0800477f
 8004768:	08004797 	.word	0x08004797
 800476c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4bb8      	ldr	r3, [pc, #736]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4ab7      	ldr	r2, [pc, #732]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800477c:	e00c      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fefd 	bl	8005584 <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
      break;
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800479e:	4bad      	ldr	r3, [pc, #692]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	49aa      	ldr	r1, [pc, #680]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047b0:	e001      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8086 	beq.w	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c4:	4ba4      	ldr	r3, [pc, #656]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4aa3      	ldr	r2, [pc, #652]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d0:	f7fc fde6 	bl	80013a0 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	e009      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fc fde2 	bl	80013a0 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d902      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	75fb      	strb	r3, [r7, #23]
        break;
 80047ea:	e005      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ec:	4b9a      	ldr	r3, [pc, #616]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ef      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d166      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047fe:	4b95      	ldr	r3, [pc, #596]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004808:	4053      	eors	r3, r2
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004812:	4b90      	ldr	r3, [pc, #576]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481c:	4b8d      	ldr	r3, [pc, #564]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a8c      	ldr	r2, [pc, #560]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004828:	4b8a      	ldr	r3, [pc, #552]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a89      	ldr	r2, [pc, #548]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004834:	4a87      	ldr	r2, [pc, #540]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004844:	d115      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fc fdab 	bl	80013a0 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800484c:	e00b      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fc fda7 	bl	80013a0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d902      	bls.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	75fb      	strb	r3, [r7, #23]
            break;
 8004864:	e005      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004866:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ed      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d126      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004886:	d10d      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004888:	4b72      	ldr	r3, [pc, #456]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004896:	0919      	lsrs	r1, r3, #4
 8004898:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800489a:	400b      	ands	r3, r1
 800489c:	496d      	ldr	r1, [pc, #436]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]
 80048a2:	e005      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80048a4:	4b6b      	ldr	r3, [pc, #428]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	4a6a      	ldr	r2, [pc, #424]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048ae:	6113      	str	r3, [r2, #16]
 80048b0:	4b68      	ldr	r3, [pc, #416]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048be:	4965      	ldr	r1, [pc, #404]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	670b      	str	r3, [r1, #112]	; 0x70
 80048c4:	e004      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	75bb      	strb	r3, [r7, #22]
 80048ca:	e001      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d07e      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e0:	2b28      	cmp	r3, #40	; 0x28
 80048e2:	d867      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	080049bb 	.word	0x080049bb
 80048f0:	080049b5 	.word	0x080049b5
 80048f4:	080049b5 	.word	0x080049b5
 80048f8:	080049b5 	.word	0x080049b5
 80048fc:	080049b5 	.word	0x080049b5
 8004900:	080049b5 	.word	0x080049b5
 8004904:	080049b5 	.word	0x080049b5
 8004908:	080049b5 	.word	0x080049b5
 800490c:	08004991 	.word	0x08004991
 8004910:	080049b5 	.word	0x080049b5
 8004914:	080049b5 	.word	0x080049b5
 8004918:	080049b5 	.word	0x080049b5
 800491c:	080049b5 	.word	0x080049b5
 8004920:	080049b5 	.word	0x080049b5
 8004924:	080049b5 	.word	0x080049b5
 8004928:	080049b5 	.word	0x080049b5
 800492c:	080049a3 	.word	0x080049a3
 8004930:	080049b5 	.word	0x080049b5
 8004934:	080049b5 	.word	0x080049b5
 8004938:	080049b5 	.word	0x080049b5
 800493c:	080049b5 	.word	0x080049b5
 8004940:	080049b5 	.word	0x080049b5
 8004944:	080049b5 	.word	0x080049b5
 8004948:	080049b5 	.word	0x080049b5
 800494c:	080049bb 	.word	0x080049bb
 8004950:	080049b5 	.word	0x080049b5
 8004954:	080049b5 	.word	0x080049b5
 8004958:	080049b5 	.word	0x080049b5
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049b5 	.word	0x080049b5
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049bb 	.word	0x080049bb
 8004970:	080049b5 	.word	0x080049b5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049b5 	.word	0x080049b5
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049bb 	.word	0x080049bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fdf4 	bl	8005584 <RCCEx_PLL2_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049a0:	e00c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	2101      	movs	r1, #1
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fe9d 	bl	80056e8 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
      break;
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80049ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ce:	4921      	ldr	r1, [pc, #132]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	654b      	str	r3, [r1, #84]	; 0x54
 80049d4:	e001      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03e      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d820      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a37 	.word	0x08004a37
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a1f 	.word	0x08004a1f
 8004a00:	08004a37 	.word	0x08004a37
 8004a04:	08004a37 	.word	0x08004a37
 8004a08:	08004a37 	.word	0x08004a37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fdb6 	bl	8005584 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e00c      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3324      	adds	r3, #36	; 0x24
 8004a22:	2101      	movs	r1, #1
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fe5f 	bl	80056e8 <RCCEx_PLL3_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a2e:	e003      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
      break;
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d110      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f023 0207 	bic.w	r2, r3, #7
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4a:	4902      	ldr	r1, [pc, #8]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400
 8004a58:	58024800 	.word	0x58024800
 8004a5c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d039      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d820      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004ac3 	.word	0x08004ac3
 8004a84:	08004a99 	.word	0x08004a99
 8004a88:	08004aab 	.word	0x08004aab
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fd70 	bl	8005584 <RCCEx_PLL2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e00c      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3324      	adds	r3, #36	; 0x24
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fe19 	bl	80056e8 <RCCEx_PLL3_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aca:	4bb7      	ldr	r3, [pc, #732]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f023 0207 	bic.w	r2, r3, #7
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	49b3      	ldr	r1, [pc, #716]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	658b      	str	r3, [r1, #88]	; 0x58
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d04b      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004afa:	d02e      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b00:	d828      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d02a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0c:	d822      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b12:	d026      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b18:	d81c      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1e:	d010      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b24:	d816      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fd24 	bl	8005584 <RCCEx_PLL2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b40:	e012      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3324      	adds	r3, #36	; 0x24
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fdcd 	bl	80056e8 <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b52:	e009      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
      break;
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e004      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6e:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	498a      	ldr	r1, [pc, #552]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	654b      	str	r3, [r1, #84]	; 0x54
 8004b82:	e001      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d04b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b9e:	d02e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004ba0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ba4:	d828      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d02a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	d822      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bb6:	d026      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004bb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bbc:	d81c      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc8:	d816      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01d      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fcd2 	bl	8005584 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004be4:	e012      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3324      	adds	r3, #36	; 0x24
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fd7b 	bl	80056e8 <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bf6:	e009      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e004      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c12:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c20:	4961      	ldr	r1, [pc, #388]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	658b      	str	r3, [r1, #88]	; 0x58
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d04b      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c42:	d02e      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004c44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c48:	d828      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d02a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d822      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c5a:	d026      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004c5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c60:	d81c      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c66:	d010      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6c:	d816      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d111      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fc80 	bl	8005584 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c88:	e012      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3324      	adds	r3, #36	; 0x24
 8004c8e:	2102      	movs	r1, #2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fd29 	bl	80056e8 <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c9a:	e009      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e004      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cb6:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc4:	4938      	ldr	r1, [pc, #224]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	658b      	str	r3, [r1, #88]	; 0x58
 8004cca:	e001      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d10a      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fcfa 	bl	80056e8 <RCCEx_PLL3_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0c:	4926      	ldr	r1, [pc, #152]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d28:	d10a      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3324      	adds	r3, #36	; 0x24
 8004d2e:	2102      	movs	r1, #2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fcd9 	bl	80056e8 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4e:	4916      	ldr	r1, [pc, #88]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d036      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d6a:	d01f      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d70:	d817      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7a:	d009      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004d7c:	e011      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fbfd 	bl	8005584 <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d8e:	e00e      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3324      	adds	r3, #36	; 0x24
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fca6 	bl	80056e8 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004da8:	58024400 	.word	0x58024400
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db4:	4b93      	ldr	r3, [pc, #588]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dc2:	4990      	ldr	r1, [pc, #576]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	658b      	str	r3, [r1, #88]	; 0x58
 8004dc8:	e001      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d033      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004de4:	d01c      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004de6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dea:	d816      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d003      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d007      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfa:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a81      	ldr	r2, [pc, #516]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e06:	e00c      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3324      	adds	r3, #36	; 0x24
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fc6a 	bl	80056e8 <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e18:	e003      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e28:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	4973      	ldr	r1, [pc, #460]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	654b      	str	r3, [r1, #84]	; 0x54
 8004e3c:	e001      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d029      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5a:	d007      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004e5c:	e00f      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5e:	4b69      	ldr	r3, [pc, #420]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	4a68      	ldr	r2, [pc, #416]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	2102      	movs	r1, #2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fb86 	bl	8005584 <RCCEx_PLL2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e7c:	e002      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
      break;
 8004e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e8a:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	495b      	ldr	r1, [pc, #364]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e9c:	e001      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fc17 	bl	80056e8 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d030      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed8:	d017      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d811      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d013      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d80b      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4a42      	ldr	r2, [pc, #264]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f02:	e007      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]
      break;
 8004f08:	e004      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f26:	4937      	ldr	r1, [pc, #220]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	492e      	ldr	r1, [pc, #184]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f6a:	4926      	ldr	r1, [pc, #152]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f88:	491e      	ldr	r1, [pc, #120]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fa4:	6113      	str	r3, [r2, #16]
 8004fa6:	4b17      	ldr	r3, [pc, #92]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004fb0:	4914      	ldr	r1, [pc, #80]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da08      	bge.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fca:	490e      	ldr	r1, [pc, #56]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	4906      	ldr	r1, [pc, #24]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004ff0:	7dbb      	ldrb	r3, [r7, #22]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	58024400 	.word	0x58024400

08005008 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800500c:	f7ff f860 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4904      	ldr	r1, [pc, #16]	; (8005030 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	58024400 	.word	0x58024400
 8005030:	08006ee0 	.word	0x08006ee0

08005034 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005046:	4b9f      	ldr	r3, [pc, #636]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	0b1b      	lsrs	r3, r3, #12
 800504c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005050:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005052:	4b9c      	ldr	r3, [pc, #624]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800505e:	4b99      	ldr	r3, [pc, #612]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	08db      	lsrs	r3, r3, #3
 8005064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8111 	beq.w	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b02      	cmp	r3, #2
 8005086:	f000 8083 	beq.w	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b02      	cmp	r3, #2
 800508e:	f200 80a1 	bhi.w	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d056      	beq.n	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800509e:	e099      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a0:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02d      	beq.n	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050ac:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	4a84      	ldr	r2, [pc, #528]	; (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
 80050bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b7b      	ldr	r3, [pc, #492]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005106:	e087      	b.n	8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514a:	e065      	b.n	8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b59      	ldr	r3, [pc, #356]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518e:	e043      	b.n	8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051d2:	e021      	b.n	8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005216:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005218:	4b2a      	ldr	r3, [pc, #168]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	0a5b      	lsrs	r3, r3, #9
 800521e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800522e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005232:	edd7 6a07 	vldr	s13, [r7, #28]
 8005236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523e:	ee17 2a90 	vmov	r2, s15
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005246:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800525c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005260:	edd7 6a07 	vldr	s13, [r7, #28]
 8005264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526c:	ee17 2a90 	vmov	r2, s15
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800528a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529a:	ee17 2a90 	vmov	r2, s15
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052a2:	e008      	b.n	80052b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	bf00      	nop
 80052b8:	3724      	adds	r7, #36	; 0x24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	58024400 	.word	0x58024400
 80052c8:	03d09000 	.word	0x03d09000
 80052cc:	46000000 	.word	0x46000000
 80052d0:	4c742400 	.word	0x4c742400
 80052d4:	4a742400 	.word	0x4a742400
 80052d8:	4af42400 	.word	0x4af42400

080052dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e4:	4ba1      	ldr	r3, [pc, #644]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052ee:	4b9f      	ldr	r3, [pc, #636]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	0d1b      	lsrs	r3, r3, #20
 80052f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052fa:	4b9c      	ldr	r3, [pc, #624]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005306:	4b99      	ldr	r3, [pc, #612]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8111 	beq.w	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b02      	cmp	r3, #2
 800532e:	f000 8083 	beq.w	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b02      	cmp	r3, #2
 8005336:	f200 80a1 	bhi.w	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d056      	beq.n	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005346:	e099      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02d      	beq.n	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005354:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	08db      	lsrs	r3, r3, #3
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	4a84      	ldr	r2, [pc, #528]	; (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
 8005364:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005392:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053ae:	e087      	b.n	80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b6a      	ldr	r3, [pc, #424]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053f2:	e065      	b.n	80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005436:	e043      	b.n	80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a03 	vldr	s12, [r7, #12]
 800545e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800547a:	e021      	b.n	80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054c0:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	0a5b      	lsrs	r3, r3, #9
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054da:	edd7 6a07 	vldr	s13, [r7, #28]
 80054de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e6:	ee17 2a90 	vmov	r2, s15
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005508:	edd7 6a07 	vldr	s13, [r7, #28]
 800550c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005514:	ee17 2a90 	vmov	r2, s15
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005536:	edd7 6a07 	vldr	s13, [r7, #28]
 800553a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005542:	ee17 2a90 	vmov	r2, s15
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800554a:	e008      	b.n	800555e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
}
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	; 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	03d09000 	.word	0x03d09000
 8005574:	46000000 	.word	0x46000000
 8005578:	4c742400 	.word	0x4c742400
 800557c:	4a742400 	.word	0x4a742400
 8005580:	4af42400 	.word	0x4af42400

08005584 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005592:	4b53      	ldr	r3, [pc, #332]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b03      	cmp	r3, #3
 800559c:	d101      	bne.n	80055a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e099      	b.n	80056d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055a2:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a4e      	ldr	r2, [pc, #312]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ae:	f7fb fef7 	bl	80013a0 <HAL_GetTick>
 80055b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055b6:	f7fb fef3 	bl	80013a0 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e086      	b.n	80056d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055c8:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055d4:	4b42      	ldr	r3, [pc, #264]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	031b      	lsls	r3, r3, #12
 80055e2:	493f      	ldr	r1, [pc, #252]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	628b      	str	r3, [r1, #40]	; 0x28
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	025b      	lsls	r3, r3, #9
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	3b01      	subs	r3, #1
 8005612:	061b      	lsls	r3, r3, #24
 8005614:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005618:	4931      	ldr	r1, [pc, #196]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800561e:	4b30      	ldr	r3, [pc, #192]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	492d      	ldr	r1, [pc, #180]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	f023 0220 	bic.w	r2, r3, #32
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4928      	ldr	r1, [pc, #160]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005642:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800564e:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <RCCEx_PLL2_Config+0x160>)
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	69d2      	ldr	r2, [r2, #28]
 800565a:	00d2      	lsls	r2, r2, #3
 800565c:	4920      	ldr	r1, [pc, #128]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005662:	4b1f      	ldr	r3, [pc, #124]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	4a1e      	ldr	r2, [pc, #120]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005668:	f043 0310 	orr.w	r3, r3, #16
 800566c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005674:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800567a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005680:	e00f      	b.n	80056a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	4a14      	ldr	r2, [pc, #80]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800568e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005692:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005694:	e005      	b.n	80056a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 800569c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a0e      	ldr	r2, [pc, #56]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ae:	f7fb fe77 	bl	80013a0 <HAL_GetTick>
 80056b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b4:	e008      	b.n	80056c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056b6:	f7fb fe73 	bl	80013a0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <RCCEx_PLL2_Config+0x15c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	58024400 	.word	0x58024400
 80056e4:	ffff0007 	.word	0xffff0007

080056e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056f6:	4b53      	ldr	r3, [pc, #332]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d101      	bne.n	8005706 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e099      	b.n	800583a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005706:	4b4f      	ldr	r3, [pc, #316]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a4e      	ldr	r2, [pc, #312]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800570c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fb fe45 	bl	80013a0 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005718:	e008      	b.n	800572c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800571a:	f7fb fe41 	bl	80013a0 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e086      	b.n	800583a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800572c:	4b45      	ldr	r3, [pc, #276]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f0      	bne.n	800571a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005738:	4b42      	ldr	r3, [pc, #264]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	051b      	lsls	r3, r3, #20
 8005746:	493f      	ldr	r1, [pc, #252]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005748:	4313      	orrs	r3, r2
 800574a:	628b      	str	r3, [r1, #40]	; 0x28
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	3b01      	subs	r3, #1
 800575c:	025b      	lsls	r3, r3, #9
 800575e:	b29b      	uxth	r3, r3
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	3b01      	subs	r3, #1
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800577c:	4931      	ldr	r1, [pc, #196]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	492d      	ldr	r1, [pc, #180]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4928      	ldr	r1, [pc, #160]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a26      	ldr	r2, [pc, #152]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b6:	4b24      	ldr	r3, [pc, #144]	; (8005848 <RCCEx_PLL3_Config+0x160>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	69d2      	ldr	r2, [r2, #28]
 80057be:	00d2      	lsls	r2, r2, #3
 80057c0:	4920      	ldr	r1, [pc, #128]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057e4:	e00f      	b.n	8005806 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d106      	bne.n	80057fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057ec:	4b15      	ldr	r3, [pc, #84]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a14      	ldr	r2, [pc, #80]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057f8:	e005      	b.n	8005806 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005804:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005806:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005812:	f7fb fdc5 	bl	80013a0 <HAL_GetTick>
 8005816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005818:	e008      	b.n	800582c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800581a:	f7fb fdc1 	bl	80013a0 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e006      	b.n	800583a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <RCCEx_PLL3_Config+0x15c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400
 8005848:	ffff0007 	.word	0xffff0007

0800584c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e042      	b.n	80058e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fb fbbf 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	; 0x24
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f82c 	bl	80058ec <UART_SetConfig>
 8005894:	4603      	mov	r3, r0
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e022      	b.n	80058e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fd80 	bl	80063ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fe07 	bl	80064f0 <UART_CheckIdleState>
 80058e2:	4603      	mov	r3, r0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	4313      	orrs	r3, r2
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4bbf      	ldr	r3, [pc, #764]	; (8005c18 <UART_SetConfig+0x32c>)
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005922:	430b      	orrs	r3, r1
 8005924:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4ab5      	ldr	r2, [pc, #724]	; (8005c1c <UART_SetConfig+0x330>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005952:	4313      	orrs	r3, r2
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4bb0      	ldr	r3, [pc, #704]	; (8005c20 <UART_SetConfig+0x334>)
 800595e:	4013      	ands	r3, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005966:	430b      	orrs	r3, r1
 8005968:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	f023 010f 	bic.w	r1, r3, #15
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4aa7      	ldr	r2, [pc, #668]	; (8005c24 <UART_SetConfig+0x338>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d176      	bne.n	8005a78 <UART_SetConfig+0x18c>
 800598a:	4ba7      	ldr	r3, [pc, #668]	; (8005c28 <UART_SetConfig+0x33c>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005992:	2b28      	cmp	r3, #40	; 0x28
 8005994:	d86c      	bhi.n	8005a70 <UART_SetConfig+0x184>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0xb0>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a71 	.word	0x08005a71
 80059a4:	08005a71 	.word	0x08005a71
 80059a8:	08005a71 	.word	0x08005a71
 80059ac:	08005a71 	.word	0x08005a71
 80059b0:	08005a71 	.word	0x08005a71
 80059b4:	08005a71 	.word	0x08005a71
 80059b8:	08005a71 	.word	0x08005a71
 80059bc:	08005a49 	.word	0x08005a49
 80059c0:	08005a71 	.word	0x08005a71
 80059c4:	08005a71 	.word	0x08005a71
 80059c8:	08005a71 	.word	0x08005a71
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	08005a71 	.word	0x08005a71
 80059d4:	08005a71 	.word	0x08005a71
 80059d8:	08005a71 	.word	0x08005a71
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a71 	.word	0x08005a71
 80059e4:	08005a71 	.word	0x08005a71
 80059e8:	08005a71 	.word	0x08005a71
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005a71 	.word	0x08005a71
 80059f4:	08005a71 	.word	0x08005a71
 80059f8:	08005a71 	.word	0x08005a71
 80059fc:	08005a59 	.word	0x08005a59
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005a71 	.word	0x08005a71
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005a71 	.word	0x08005a71
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a61 	.word	0x08005a61
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a71 	.word	0x08005a71
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a71 	.word	0x08005a71
 8005a34:	08005a71 	.word	0x08005a71
 8005a38:	08005a71 	.word	0x08005a71
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a46:	e222      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4e:	e21e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a56:	e21a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5e:	e216      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e212      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a68:	2340      	movs	r3, #64	; 0x40
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e20e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e20a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6b      	ldr	r2, [pc, #428]	; (8005c2c <UART_SetConfig+0x340>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d130      	bne.n	8005ae4 <UART_SetConfig+0x1f8>
 8005a82:	4b69      	ldr	r3, [pc, #420]	; (8005c28 <UART_SetConfig+0x33c>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d826      	bhi.n	8005adc <UART_SetConfig+0x1f0>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x1a8>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005abd 	.word	0x08005abd
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab2:	e1ec      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aba:	e1e8      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac2:	e1e4      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e1e0      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005acc:	2320      	movs	r3, #32
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e1dc      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e1d8      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e1d4      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a51      	ldr	r2, [pc, #324]	; (8005c30 <UART_SetConfig+0x344>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d130      	bne.n	8005b50 <UART_SetConfig+0x264>
 8005aee:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <UART_SetConfig+0x33c>)
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d826      	bhi.n	8005b48 <UART_SetConfig+0x25c>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x214>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b19 	.word	0x08005b19
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b29 	.word	0x08005b29
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1e:	e1b6      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e1b2      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e1ae      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e1aa      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e1a6      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b40:	2340      	movs	r3, #64	; 0x40
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e1a2      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e19e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a37      	ldr	r2, [pc, #220]	; (8005c34 <UART_SetConfig+0x348>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d130      	bne.n	8005bbc <UART_SetConfig+0x2d0>
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <UART_SetConfig+0x33c>)
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d826      	bhi.n	8005bb4 <UART_SetConfig+0x2c8>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x280>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b85 	.word	0x08005b85
 8005b70:	08005b8d 	.word	0x08005b8d
 8005b74:	08005b95 	.word	0x08005b95
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8a:	e180      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b92:	e17c      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b94:	2308      	movs	r3, #8
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e178      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba2:	e174      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005baa:	e170      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005bac:	2340      	movs	r3, #64	; 0x40
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e16c      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e168      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <UART_SetConfig+0x34c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d142      	bne.n	8005c4c <UART_SetConfig+0x360>
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <UART_SetConfig+0x33c>)
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d838      	bhi.n	8005c44 <UART_SetConfig+0x358>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x2ec>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005bf1 	.word	0x08005bf1
 8005bdc:	08005bf9 	.word	0x08005bf9
 8005be0:	08005c01 	.word	0x08005c01
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e14a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e146      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c00:	2308      	movs	r3, #8
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e142      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0e:	e13e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c10:	2320      	movs	r3, #32
 8005c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c16:	e13a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c18:	cfff69f3 	.word	0xcfff69f3
 8005c1c:	58000c00 	.word	0x58000c00
 8005c20:	11fff4ff 	.word	0x11fff4ff
 8005c24:	40011000 	.word	0x40011000
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	40004400 	.word	0x40004400
 8005c30:	40004800 	.word	0x40004800
 8005c34:	40004c00 	.word	0x40004c00
 8005c38:	40005000 	.word	0x40005000
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c42:	e124      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e120      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4acc      	ldr	r2, [pc, #816]	; (8005f84 <UART_SetConfig+0x698>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d176      	bne.n	8005d44 <UART_SetConfig+0x458>
 8005c56:	4bcc      	ldr	r3, [pc, #816]	; (8005f88 <UART_SetConfig+0x69c>)
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c5e:	2b28      	cmp	r3, #40	; 0x28
 8005c60:	d86c      	bhi.n	8005d3c <UART_SetConfig+0x450>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x37c>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005d0d 	.word	0x08005d0d
 8005c6c:	08005d3d 	.word	0x08005d3d
 8005c70:	08005d3d 	.word	0x08005d3d
 8005c74:	08005d3d 	.word	0x08005d3d
 8005c78:	08005d3d 	.word	0x08005d3d
 8005c7c:	08005d3d 	.word	0x08005d3d
 8005c80:	08005d3d 	.word	0x08005d3d
 8005c84:	08005d3d 	.word	0x08005d3d
 8005c88:	08005d15 	.word	0x08005d15
 8005c8c:	08005d3d 	.word	0x08005d3d
 8005c90:	08005d3d 	.word	0x08005d3d
 8005c94:	08005d3d 	.word	0x08005d3d
 8005c98:	08005d3d 	.word	0x08005d3d
 8005c9c:	08005d3d 	.word	0x08005d3d
 8005ca0:	08005d3d 	.word	0x08005d3d
 8005ca4:	08005d3d 	.word	0x08005d3d
 8005ca8:	08005d1d 	.word	0x08005d1d
 8005cac:	08005d3d 	.word	0x08005d3d
 8005cb0:	08005d3d 	.word	0x08005d3d
 8005cb4:	08005d3d 	.word	0x08005d3d
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005d3d 	.word	0x08005d3d
 8005cc0:	08005d3d 	.word	0x08005d3d
 8005cc4:	08005d3d 	.word	0x08005d3d
 8005cc8:	08005d25 	.word	0x08005d25
 8005ccc:	08005d3d 	.word	0x08005d3d
 8005cd0:	08005d3d 	.word	0x08005d3d
 8005cd4:	08005d3d 	.word	0x08005d3d
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d3d 	.word	0x08005d3d
 8005ce0:	08005d3d 	.word	0x08005d3d
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005d3d 	.word	0x08005d3d
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d3d 	.word	0x08005d3d
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d12:	e0bc      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1a:	e0b8      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d22:	e0b4      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2a:	e0b0      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d32:	e0ac      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e0a8      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e0a4      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a90      	ldr	r2, [pc, #576]	; (8005f8c <UART_SetConfig+0x6a0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d130      	bne.n	8005db0 <UART_SetConfig+0x4c4>
 8005d4e:	4b8e      	ldr	r3, [pc, #568]	; (8005f88 <UART_SetConfig+0x69c>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d826      	bhi.n	8005da8 <UART_SetConfig+0x4bc>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x474>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d89 	.word	0x08005d89
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e086      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e082      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e07e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e07a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e076      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e072      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e06e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a76      	ldr	r2, [pc, #472]	; (8005f90 <UART_SetConfig+0x6a4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d130      	bne.n	8005e1c <UART_SetConfig+0x530>
 8005dba:	4b73      	ldr	r3, [pc, #460]	; (8005f88 <UART_SetConfig+0x69c>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d826      	bhi.n	8005e14 <UART_SetConfig+0x528>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x4e0>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	08005df5 	.word	0x08005df5
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dea:	e050      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df2:	e04c      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfa:	e048      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e02:	e044      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e04:	2320      	movs	r3, #32
 8005e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0a:	e040      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e0c:	2340      	movs	r3, #64	; 0x40
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e03c      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e038      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a5c      	ldr	r2, [pc, #368]	; (8005f94 <UART_SetConfig+0x6a8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d130      	bne.n	8005e88 <UART_SetConfig+0x59c>
 8005e26:	4b58      	ldr	r3, [pc, #352]	; (8005f88 <UART_SetConfig+0x69c>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d826      	bhi.n	8005e80 <UART_SetConfig+0x594>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x54c>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2302      	movs	r3, #2
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e01a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e016      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e012      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e00e      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e00a      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e006      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e002      	b.n	8005e8e <UART_SetConfig+0x5a2>
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <UART_SetConfig+0x6a8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	f040 80ef 	bne.w	8006078 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	dc46      	bgt.n	8005f30 <UART_SetConfig+0x644>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	f2c0 8081 	blt.w	8005faa <UART_SetConfig+0x6be>
 8005ea8:	3b02      	subs	r3, #2
 8005eaa:	2b1e      	cmp	r3, #30
 8005eac:	d87d      	bhi.n	8005faa <UART_SetConfig+0x6be>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0x5c8>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005f37 	.word	0x08005f37
 8005eb8:	08005fab 	.word	0x08005fab
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005fab 	.word	0x08005fab
 8005ec4:	08005fab 	.word	0x08005fab
 8005ec8:	08005fab 	.word	0x08005fab
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005fab 	.word	0x08005fab
 8005ed4:	08005fab 	.word	0x08005fab
 8005ed8:	08005fab 	.word	0x08005fab
 8005edc:	08005fab 	.word	0x08005fab
 8005ee0:	08005fab 	.word	0x08005fab
 8005ee4:	08005fab 	.word	0x08005fab
 8005ee8:	08005fab 	.word	0x08005fab
 8005eec:	08005f5f 	.word	0x08005f5f
 8005ef0:	08005fab 	.word	0x08005fab
 8005ef4:	08005fab 	.word	0x08005fab
 8005ef8:	08005fab 	.word	0x08005fab
 8005efc:	08005fab 	.word	0x08005fab
 8005f00:	08005fab 	.word	0x08005fab
 8005f04:	08005fab 	.word	0x08005fab
 8005f08:	08005fab 	.word	0x08005fab
 8005f0c:	08005fab 	.word	0x08005fab
 8005f10:	08005fab 	.word	0x08005fab
 8005f14:	08005fab 	.word	0x08005fab
 8005f18:	08005fab 	.word	0x08005fab
 8005f1c:	08005fab 	.word	0x08005fab
 8005f20:	08005fab 	.word	0x08005fab
 8005f24:	08005fab 	.word	0x08005fab
 8005f28:	08005fab 	.word	0x08005fab
 8005f2c:	08005f9d 	.word	0x08005f9d
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d036      	beq.n	8005fa2 <UART_SetConfig+0x6b6>
 8005f34:	e039      	b.n	8005faa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f36:	f7ff f867 	bl	8005008 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f3c:	e03b      	b.n	8005fb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff f876 	bl	8005034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f4c:	e033      	b.n	8005fb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f9c2 	bl	80052dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f5c:	e02b      	b.n	8005fb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <UART_SetConfig+0x69c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <UART_SetConfig+0x69c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <UART_SetConfig+0x6ac>)
 8005f76:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f7c:	e01b      	b.n	8005fb6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <UART_SetConfig+0x6ac>)
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f82:	e018      	b.n	8005fb6 <UART_SetConfig+0x6ca>
 8005f84:	40011400 	.word	0x40011400
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	40007800 	.word	0x40007800
 8005f90:	40007c00 	.word	0x40007c00
 8005f94:	58000c00 	.word	0x58000c00
 8005f98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f9c:	4bc4      	ldr	r3, [pc, #784]	; (80062b0 <UART_SetConfig+0x9c4>)
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa0:	e009      	b.n	8005fb6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa8:	e005      	b.n	8005fb6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 81da 	beq.w	8006372 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4abc      	ldr	r2, [pc, #752]	; (80062b4 <UART_SetConfig+0x9c8>)
 8005fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d305      	bcc.n	8005fee <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ff4:	e1bd      	b.n	8006372 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	4aac      	ldr	r2, [pc, #688]	; (80062b4 <UART_SetConfig+0x9c8>)
 8006004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006008:	b29a      	uxth	r2, r3
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	f7fa f963 	bl	80002d8 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	020b      	lsls	r3, r1, #8
 8006024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006028:	0202      	lsls	r2, r0, #8
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	6849      	ldr	r1, [r1, #4]
 800602e:	0849      	lsrs	r1, r1, #1
 8006030:	4608      	mov	r0, r1
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	1814      	adds	r4, r2, r0
 8006038:	eb43 0501 	adc.w	r5, r3, r1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	461a      	mov	r2, r3
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	4620      	mov	r0, r4
 8006048:	4629      	mov	r1, r5
 800604a:	f7fa f945 	bl	80002d8 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4613      	mov	r3, r2
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605c:	d308      	bcc.n	8006070 <UART_SetConfig+0x784>
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006064:	d204      	bcs.n	8006070 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e180      	b.n	8006372 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006076:	e17c      	b.n	8006372 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	f040 80bf 	bne.w	8006202 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006088:	2b20      	cmp	r3, #32
 800608a:	dc49      	bgt.n	8006120 <UART_SetConfig+0x834>
 800608c:	2b00      	cmp	r3, #0
 800608e:	db7c      	blt.n	800618a <UART_SetConfig+0x89e>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d87a      	bhi.n	800618a <UART_SetConfig+0x89e>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x7b0>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	08006127 	.word	0x08006127
 80060a0:	0800612f 	.word	0x0800612f
 80060a4:	0800618b 	.word	0x0800618b
 80060a8:	0800618b 	.word	0x0800618b
 80060ac:	08006137 	.word	0x08006137
 80060b0:	0800618b 	.word	0x0800618b
 80060b4:	0800618b 	.word	0x0800618b
 80060b8:	0800618b 	.word	0x0800618b
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800618b 	.word	0x0800618b
 80060c4:	0800618b 	.word	0x0800618b
 80060c8:	0800618b 	.word	0x0800618b
 80060cc:	0800618b 	.word	0x0800618b
 80060d0:	0800618b 	.word	0x0800618b
 80060d4:	0800618b 	.word	0x0800618b
 80060d8:	0800618b 	.word	0x0800618b
 80060dc:	08006157 	.word	0x08006157
 80060e0:	0800618b 	.word	0x0800618b
 80060e4:	0800618b 	.word	0x0800618b
 80060e8:	0800618b 	.word	0x0800618b
 80060ec:	0800618b 	.word	0x0800618b
 80060f0:	0800618b 	.word	0x0800618b
 80060f4:	0800618b 	.word	0x0800618b
 80060f8:	0800618b 	.word	0x0800618b
 80060fc:	0800618b 	.word	0x0800618b
 8006100:	0800618b 	.word	0x0800618b
 8006104:	0800618b 	.word	0x0800618b
 8006108:	0800618b 	.word	0x0800618b
 800610c:	0800618b 	.word	0x0800618b
 8006110:	0800618b 	.word	0x0800618b
 8006114:	0800618b 	.word	0x0800618b
 8006118:	0800618b 	.word	0x0800618b
 800611c:	0800617d 	.word	0x0800617d
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d02e      	beq.n	8006182 <UART_SetConfig+0x896>
 8006124:	e031      	b.n	800618a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006126:	f7fe f803 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 800612a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800612c:	e033      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800612e:	f7fe f815 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 8006132:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006134:	e02f      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff7a 	bl	8005034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006144:	e027      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f8c6 	bl	80052dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006154:	e01f      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006156:	4b58      	ldr	r3, [pc, #352]	; (80062b8 <UART_SetConfig+0x9cc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006162:	4b55      	ldr	r3, [pc, #340]	; (80062b8 <UART_SetConfig+0x9cc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	08db      	lsrs	r3, r3, #3
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	4a53      	ldr	r2, [pc, #332]	; (80062bc <UART_SetConfig+0x9d0>)
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006174:	e00f      	b.n	8006196 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006176:	4b51      	ldr	r3, [pc, #324]	; (80062bc <UART_SetConfig+0x9d0>)
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617a:	e00c      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800617c:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <UART_SetConfig+0x9c4>)
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006180:	e009      	b.n	8006196 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006188:	e005      	b.n	8006196 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80ea 	beq.w	8006372 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	4a44      	ldr	r2, [pc, #272]	; (80062b4 <UART_SetConfig+0x9c8>)
 80061a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b0:	005a      	lsls	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	441a      	add	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d916      	bls.n	80061fa <UART_SetConfig+0x90e>
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d212      	bcs.n	80061fa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f023 030f 	bic.w	r3, r3, #15
 80061dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ec:	4313      	orrs	r3, r2
 80061ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e0bb      	b.n	8006372 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006200:	e0b7      	b.n	8006372 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006206:	2b20      	cmp	r3, #32
 8006208:	dc4a      	bgt.n	80062a0 <UART_SetConfig+0x9b4>
 800620a:	2b00      	cmp	r3, #0
 800620c:	f2c0 8086 	blt.w	800631c <UART_SetConfig+0xa30>
 8006210:	2b20      	cmp	r3, #32
 8006212:	f200 8083 	bhi.w	800631c <UART_SetConfig+0xa30>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x930>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062c1 	.word	0x080062c1
 8006224:	0800631d 	.word	0x0800631d
 8006228:	0800631d 	.word	0x0800631d
 800622c:	080062c9 	.word	0x080062c9
 8006230:	0800631d 	.word	0x0800631d
 8006234:	0800631d 	.word	0x0800631d
 8006238:	0800631d 	.word	0x0800631d
 800623c:	080062d9 	.word	0x080062d9
 8006240:	0800631d 	.word	0x0800631d
 8006244:	0800631d 	.word	0x0800631d
 8006248:	0800631d 	.word	0x0800631d
 800624c:	0800631d 	.word	0x0800631d
 8006250:	0800631d 	.word	0x0800631d
 8006254:	0800631d 	.word	0x0800631d
 8006258:	0800631d 	.word	0x0800631d
 800625c:	080062e9 	.word	0x080062e9
 8006260:	0800631d 	.word	0x0800631d
 8006264:	0800631d 	.word	0x0800631d
 8006268:	0800631d 	.word	0x0800631d
 800626c:	0800631d 	.word	0x0800631d
 8006270:	0800631d 	.word	0x0800631d
 8006274:	0800631d 	.word	0x0800631d
 8006278:	0800631d 	.word	0x0800631d
 800627c:	0800631d 	.word	0x0800631d
 8006280:	0800631d 	.word	0x0800631d
 8006284:	0800631d 	.word	0x0800631d
 8006288:	0800631d 	.word	0x0800631d
 800628c:	0800631d 	.word	0x0800631d
 8006290:	0800631d 	.word	0x0800631d
 8006294:	0800631d 	.word	0x0800631d
 8006298:	0800631d 	.word	0x0800631d
 800629c:	0800630f 	.word	0x0800630f
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d037      	beq.n	8006314 <UART_SetConfig+0xa28>
 80062a4:	e03a      	b.n	800631c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fd ff43 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80062aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062ac:	e03c      	b.n	8006328 <UART_SetConfig+0xa3c>
 80062ae:	bf00      	nop
 80062b0:	003d0900 	.word	0x003d0900
 80062b4:	08006f00 	.word	0x08006f00
 80062b8:	58024400 	.word	0x58024400
 80062bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7fd ff4c 	bl	800415c <HAL_RCC_GetPCLK2Freq>
 80062c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062c6:	e02f      	b.n	8006328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe feb1 	bl	8005034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d6:	e027      	b.n	8006328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fffd 	bl	80052dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062e6:	e01f      	b.n	8006328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e8:	4b2c      	ldr	r3, [pc, #176]	; (800639c <UART_SetConfig+0xab0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062f4:	4b29      	ldr	r3, [pc, #164]	; (800639c <UART_SetConfig+0xab0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	08db      	lsrs	r3, r3, #3
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <UART_SetConfig+0xab4>)
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006306:	e00f      	b.n	8006328 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006308:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <UART_SetConfig+0xab4>)
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800630c:	e00c      	b.n	8006328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800630e:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <UART_SetConfig+0xab8>)
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006312:	e009      	b.n	8006328 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800631a:	e005      	b.n	8006328 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006326:	bf00      	nop
    }

    if (pclk != 0U)
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d021      	beq.n	8006372 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <UART_SetConfig+0xabc>)
 8006334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006338:	461a      	mov	r2, r3
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	441a      	add	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	b29b      	uxth	r3, r3
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d908      	bls.n	800636c <UART_SetConfig+0xa80>
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d204      	bcs.n	800636c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	e002      	b.n	8006372 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800638e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006392:	4618      	mov	r0, r3
 8006394:	3738      	adds	r7, #56	; 0x38
 8006396:	46bd      	mov	sp, r7
 8006398:	bdb0      	pop	{r4, r5, r7, pc}
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	03d09000 	.word	0x03d09000
 80063a4:	003d0900 	.word	0x003d0900
 80063a8:	08006f00 	.word	0x08006f00

080063ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01a      	beq.n	80064c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064aa:	d10a      	bne.n	80064c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006500:	f7fa ff4e 	bl	80013a0 <HAL_GetTick>
 8006504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10e      	bne.n	8006532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f82f 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e025      	b.n	800657e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b04      	cmp	r3, #4
 800653e:	d10e      	bne.n	800655e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f819 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e00f      	b.n	800657e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e062      	b.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659e:	d05e      	beq.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fa fefe 	bl	80013a0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11d      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e045      	b.n	800667e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02e      	beq.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660e:	d126      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006618:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006628:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e00f      	b.n	800667e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	429a      	cmp	r2, r3
 800667a:	d08d      	beq.n	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UARTEx_DisableFifoMode+0x16>
 8006698:	2302      	movs	r3, #2
 800669a:	e027      	b.n	80066ec <HAL_UARTEx_DisableFifoMode+0x66>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800670c:	2302      	movs	r3, #2
 800670e:	e02d      	b.n	800676c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f84f 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e02d      	b.n	80067e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	; 0x24
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f811 	bl	80067f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d108      	bne.n	8006812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006810:	e031      	b.n	8006876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006812:	2310      	movs	r3, #16
 8006814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006816:	2310      	movs	r3, #16
 8006818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	0e5b      	lsrs	r3, r3, #25
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	0f5b      	lsrs	r3, r3, #29
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	7b3a      	ldrb	r2, [r7, #12]
 800683e:	4911      	ldr	r1, [pc, #68]	; (8006884 <UARTEx_SetNbDataToProcess+0x94>)
 8006840:	5c8a      	ldrb	r2, [r1, r2]
 8006842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006846:	7b3a      	ldrb	r2, [r7, #12]
 8006848:	490f      	ldr	r1, [pc, #60]	; (8006888 <UARTEx_SetNbDataToProcess+0x98>)
 800684a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800684c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	7b7a      	ldrb	r2, [r7, #13]
 800685c:	4909      	ldr	r1, [pc, #36]	; (8006884 <UARTEx_SetNbDataToProcess+0x94>)
 800685e:	5c8a      	ldrb	r2, [r1, r2]
 8006860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006864:	7b7a      	ldrb	r2, [r7, #13]
 8006866:	4908      	ldr	r1, [pc, #32]	; (8006888 <UARTEx_SetNbDataToProcess+0x98>)
 8006868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686a:	fb93 f3f2 	sdiv	r3, r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006876:	bf00      	nop
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	08006f18 	.word	0x08006f18
 8006888:	08006f20 	.word	0x08006f20

0800688c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800688c:	b084      	sub	sp, #16
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	f107 001c 	add.w	r0, r7, #28
 800689a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d120      	bne.n	80068e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <USB_CoreInit+0xd4>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa60 	bl	8006da0 <USB_CoreReset>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	e01a      	b.n	800691c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa54 	bl	8006da0 <USB_CoreReset>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
 800690e:	e005      	b.n	800691c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	2b01      	cmp	r3, #1
 8006920:	d116      	bne.n	8006950 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	b29a      	uxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006930:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <USB_CoreInit+0xd8>)
 8006932:	4313      	orrs	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f043 0206 	orr.w	r2, r3, #6
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800695c:	b004      	add	sp, #16
 800695e:	4770      	bx	lr
 8006960:	ffbdffbf 	.word	0xffbdffbf
 8006964:	03ee0000 	.word	0x03ee0000

08006968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f023 0201 	bic.w	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d106      	bne.n	80069b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60da      	str	r2, [r3, #12]
 80069b4:	e00b      	b.n	80069ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e001      	b.n	80069ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e003      	b.n	80069d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80069ce:	2032      	movs	r0, #50	; 0x32
 80069d0:	f7fa fcf2 	bl	80013b8 <HAL_Delay>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069e0:	b084      	sub	sp, #16
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	e009      	b.n	8006a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3340      	adds	r3, #64	; 0x40
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3301      	adds	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b0e      	cmp	r3, #14
 8006a18:	d9f2      	bls.n	8006a00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11c      	bne.n	8006a5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a2e:	f043 0302 	orr.w	r3, r3, #2
 8006a32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e005      	b.n	8006a66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	4619      	mov	r1, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	461a      	mov	r2, r3
 8006a82:	680b      	ldr	r3, [r1, #0]
 8006a84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d10c      	bne.n	8006aa6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a92:	2100      	movs	r1, #0
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f949 	bl	8006d2c <USB_SetDevSpeed>
 8006a9a:	e008      	b.n	8006aae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f944 	bl	8006d2c <USB_SetDevSpeed>
 8006aa4:	e003      	b.n	8006aae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006aa6:	2103      	movs	r1, #3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f93f 	bl	8006d2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aae:	2110      	movs	r1, #16
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f8f3 	bl	8006c9c <USB_FlushTxFifo>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f911 	bl	8006ce8 <USB_FlushRxFifo>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	461a      	mov	r2, r3
 8006af0:	2300      	movs	r3, #0
 8006af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e043      	b.n	8006b82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b10:	d118      	bne.n	8006b44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b24:	461a      	mov	r2, r3
 8006b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e013      	b.n	8006b56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e008      	b.n	8006b56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	461a      	mov	r2, r3
 8006b52:	2300      	movs	r3, #0
 8006b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	461a      	mov	r2, r3
 8006b64:	2300      	movs	r3, #0
 8006b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	461a      	mov	r2, r3
 8006b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d3b7      	bcc.n	8006afa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e043      	b.n	8006c18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba6:	d118      	bne.n	8006bda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e013      	b.n	8006bec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e008      	b.n	8006bec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	461a      	mov	r2, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3301      	adds	r3, #1
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3b7      	bcc.n	8006b90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f043 0210 	orr.w	r2, r3, #16
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <USB_DevInit+0x2b4>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f043 0208 	orr.w	r2, r3, #8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d105      	bne.n	8006c84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <USB_DevInit+0x2b8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
 8006c94:	803c3800 	.word	0x803c3800
 8006c98:	40000004 	.word	0x40000004

08006c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <USB_FlushTxFifo+0x48>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d0f0      	beq.n	8006cb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	00030d40 	.word	0x00030d40

08006ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <USB_FlushRxFifo+0x40>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d901      	bls.n	8006d0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e006      	b.n	8006d1a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d0f0      	beq.n	8006cfa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	00030d40 	.word	0x00030d40

08006d2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <USB_CoreReset+0x64>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e01b      	b.n	8006df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	daf2      	bge.n	8006dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <USB_CoreReset+0x64>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d901      	bls.n	8006de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e006      	b.n	8006df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d0f0      	beq.n	8006dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	00030d40 	.word	0x00030d40

08006e08 <__libc_init_array>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4d0d      	ldr	r5, [pc, #52]	; (8006e40 <__libc_init_array+0x38>)
 8006e0c:	4c0d      	ldr	r4, [pc, #52]	; (8006e44 <__libc_init_array+0x3c>)
 8006e0e:	1b64      	subs	r4, r4, r5
 8006e10:	10a4      	asrs	r4, r4, #2
 8006e12:	2600      	movs	r6, #0
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	d109      	bne.n	8006e2c <__libc_init_array+0x24>
 8006e18:	4d0b      	ldr	r5, [pc, #44]	; (8006e48 <__libc_init_array+0x40>)
 8006e1a:	4c0c      	ldr	r4, [pc, #48]	; (8006e4c <__libc_init_array+0x44>)
 8006e1c:	f000 f82e 	bl	8006e7c <_init>
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	2600      	movs	r6, #0
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	d105      	bne.n	8006e36 <__libc_init_array+0x2e>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e30:	4798      	blx	r3
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7ee      	b.n	8006e14 <__libc_init_array+0xc>
 8006e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3a:	4798      	blx	r3
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	e7f2      	b.n	8006e26 <__libc_init_array+0x1e>
 8006e40:	08006f30 	.word	0x08006f30
 8006e44:	08006f30 	.word	0x08006f30
 8006e48:	08006f30 	.word	0x08006f30
 8006e4c:	08006f34 	.word	0x08006f34

08006e50 <memcpy>:
 8006e50:	440a      	add	r2, r1
 8006e52:	4291      	cmp	r1, r2
 8006e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e58:	d100      	bne.n	8006e5c <memcpy+0xc>
 8006e5a:	4770      	bx	lr
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e66:	4291      	cmp	r1, r2
 8006e68:	d1f9      	bne.n	8006e5e <memcpy+0xe>
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <memset>:
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
